name: CI-CD

on:
  workflow_dispatch:
    inputs:
        force_release:
          type: boolean
          default: false
          description: Force to push a release now
        hps-version:
          description: HPS version to test against
          default: 'latest-dev'
          type: choice
          options:
            - 'v1.2.0'
            - 'v1.3.45'
            - 'latest-dev'

  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"

  pull_request:

  schedule:
    - cron: "0 1 * * *"

env:
  PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'data-transfer.hps.docs.pyansys.com'
  PACKAGE_NAME: 'ansys-hps-data-transfer-client'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: "Run PyAnsys code style checks"
        uses: ansys/actions/code-style@v10

  doc-style:
    name: "Documentation Style Check"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: "Tests"
    uses: ansys/pyhps/.github/workflows/tests.yml@main
    with:
      runner: "public-ubuntu-latest-8-cores"
      docker-compose-profiles: "backend"
      hps-version: ${{ inputs.hps-version || 'latest-dev' }}
    secrets: inherit # pass all secrets

  backward-compatibility-tests:
    strategy:
      matrix:
          hps-version: ['v1.2.0', 'v1.3.45']
      fail-fast: false
    uses: ansys/pyhps/.github/workflows/tests.yml@main
    with:
      runner: "public-ubuntu-latest-8-cores"
      docker-compose-profiles: "backend"
      hps-version: ${{ matrix.hps-version }}
      upload-coverage: false
    secrets: inherit # pass all secrets

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: extractions/netrc@v2
        with:
          machine: github.com
          username: pyansys-ci-bot
          password: ${{ secrets.PYANSYS_CI_BOT_PACKAGE_TOKEN }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools tox

      - name: Install OS dependencies
        run: |
          # Necessary for creating PDF
          sudo apt update
          sudo apt install latexmk texlive-latex-extra

      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-links: false
          sphinxopts: "-j auto --color --keep-going"

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
          - should-release: false
            os: windows-latest
          - should-release: false
            python-version: '3.11'
          - should-release: false
            python-version: '3.12'
          - should-release: false
            python-version: '3.13'

    steps:
      - uses: extractions/netrc@v2
        with:
          machine: github.com
          username: pyansys-ci-bot
          password: ${{ secrets.PYANSYS_CI_BOT_PACKAGE_TOKEN }}

      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  package:
    name: Package library
    needs: [tests, docs, smoke-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: '3.13'

  library-version:
    name: Get library version
    runs-on: ubuntu-latest
    outputs:
      library_version: ${{ steps.version.outputs.library_version }}
    steps:
      - name: "Install Git and clone project"
        uses: actions/checkout@v5

      - uses: extractions/netrc@v2
        with:
          machine: github.com
          username: pyansys-ci-bot
          password: ${{ secrets.PYANSYS_CI_BOT_PACKAGE_TOKEN }}

      - name: "Set up Python ${{ env.PYTHON_VERSION }}"
        uses: ansys/actions/_setup-python@main
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          use-cache: true
          provision-uv: false
          prune-uv-cache: false

      - name: "Install the library"
        shell: bash
        run: |
          python -m pip install -e .

      - name: "Verify library is properly installed and get its version number"
        id: version
        shell: bash
        run: |
          library_name=${{ env.PACKAGE_NAME }}
          library_version=$(python -c "import importlib.metadata as importlib_metadata; print(importlib_metadata.version('$library_name'))")

          if [ -z "$library_version" ]; then
              echo "Problem getting the library version"
              exit 1;
          else
              echo "The library version is: $library_version";
          fi;
          echo "library_version=$library_version" >> $GITHUB_OUTPUT

  pre-release:
    name: Pre-release project
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    needs: [package, library-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: ansys-hps-data-transfer-client-artifacts
          path: /tmp/artifacts

      - name: List artifacts
        run: ls -ltR /tmp/artifacts

      - name: Release to latest-dev
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          tag_name: "v${{ needs.library-version.outputs.library_version }}"
          name: "v${{ needs.library-version.outputs.library_version }}"
          prerelease: true
          files: |
            /tmp/artifacts/*.whl

  upload_dev_docs:
    name: "Deploy dev documentation"
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v10
        with:
          doc-artifact-name: 'documentation-html'
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package]
    runs-on: ubuntu-latest
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Download the library artifacts from build-library step"
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.PACKAGE_NAME }}-artifacts
          path: ${{ env.PACKAGE_NAME }}-artifacts

      - name: "Upload artifacts to PyPI using trusted publisher"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.PACKAGE_NAME }}-artifacts
          skip-existing: false

      - name: Release to GitHub
        uses: ansys/actions/release-github@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    # Deploy release documentation when creating a new tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - uses: ansys/actions/doc-deploy-stable@v10
        with:
          doc-artifact-name: 'documentation-html'
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
