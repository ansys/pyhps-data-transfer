version: '3'
name: 'ansys-rep'

volumes:
  minio-data:
  keydb_data:
  postgres_data:
  keycloak_data:

services:

  traefik:
    image: traefik:v2.9
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    volumes:
     - ./config/certificates/traefik_pregen_certs.sh:/traefik_pregen_certs.sh
     - ./config/certificates:/certificates:rw
     - ./config/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
     - ./config/traefik/dynamic:/etc/traefik/dynamic:ro
     - ${DOCKER_SOCK}:/var/run/docker.sock
    ports:
      - "${HOST_PORT}:443"
    command:
      - "./traefik_pregen_certs.sh"
      - "${EXTERNAL_NAME}"
    labels:   
      #/rep/traefik/dashboard gets you started with the UI, however the API calls dont seem to be changeable...
      #The referer header check allows all the api calls to be redirected properly as well (They aren't setup to goto /rep/consul/api from the webUI)
      traefik.http.routers.traefik.rule: PathPrefix(`/hps/traefik/dashboard`) || HeadersRegexp(`referer`, `.*hps/traefik/.*`)
      traefik.http.routers.traefik.entrypoints: external
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.priority: 100
      traefik.http.routers.traefik.middlewares: traefik-stripprefix
      traefik.http.middlewares.traefik-stripprefix.stripprefix.prefixes: /hps/traefik
      #However we want to use the api "normally" as well, so we need to route the path we want someone to use
      traefik.http.routers.traefik_api.rule: PathPrefix(`/hps/traefik/api`, `/hps/traefik/api`)
      traefik.http.routers.traefik_api.entrypoints: external
      traefik.http.routers.traefik_api.service: api@internal
      traefik.http.routers.traefik_api.priority: 100
      traefik.http.routers.traefik_api.middlewares: traefik_api-rep-stripprefix, traefik_api-hps-stripprefix
      traefik.http.middlewares.traefik_api-rep-stripprefix.stripprefix.prefixes: /rep/traefik
      traefik.http.middlewares.traefik_api-hps-stripprefix.stripprefix.prefixes: /hps/traefik

  kvstore:
    image: eqalpha/keydb
    restart: unless-stopped # change to 'always' if required
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "keydb-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    volumes:
      - keydb_data:/data

  postgres:
    image: postgres
    volumes:
      - ./config/psql/create_keycloak_db.sh:/docker-entrypoint-initdb.d/create_keycloak_db.sh:ro
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: repadmin
      POSTGRES_USER: repadmin
      POSTGRES_PASSWORD: repadmin
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "repadmin"]
      interval: 5s
      retries: 20

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6
    command: >-
      start-dev
      --proxy=edge
      --hostname=${EXTERNAL_NAME}
      --hostname-port=${EXTERNAL_PORT}
      --hostname-admin-url=https://${EXTERNAL_NAME}:${EXTERNAL_PORT}/hps/auth
      --http-relative-path=/hps/auth/
      --http-enabled=true
      --import-realm
      --log-level=info
      --features=token-exchange
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_SCHEMA: public
      DB_USER: repadmin
      DB_PASSWORD: repadmin
      KEYCLOAK_ADMIN: keycloak
      KEYCLOAK_ADMIN_PASSWORD: keycloak123
    expose:
      - 8080
    volumes:
      - keycloak_data:/opt/keycloak/data/
      - ./config/keycloak/realm.json:/opt/keycloak/data/import/realm.json
    labels:
      traefik.http.routers.keycloak.tls: true
      traefik.http.routers.keycloak.rule: PathPrefix(`/hps/auth`)
      traefik.http.routers.keycloak.entrypoints: external
      traefik.http.routers.keycloak.priority: 100
      traefik.http.services.keycloak.loadbalancer.server.port: 8080
      traefik.http.routers.keycloak.middlewares: keycloak-hps-stripprefix,keycloak-addprefix
      traefik.http.middlewares.keycloak-hps-stripprefix.stripprefix.prefixes: /hps/auth
      traefik.http.middlewares.keycloak-addprefix.addprefix.prefix: /hps/auth
    healthcheck:
       test: "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1"
       interval: 10s
       timeout: 1s
       retries: 30
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=miniopassword
      - MINIO_BUCKET=data-transfer
    entrypoint: ["/bin/sh", "-c"]
    expose:
      - 9000
      - 9001
    command:
      - |
        minio server /data --console-address ":9001"
    labels:
      traefik.enable: true
      traefik.http.routers.minio.entrypoints: external
      traefik.http.routers.minio.rule: Host(`s3.${EXTERNAL_NAME}`)
      traefik.http.routers.minio.service: minio
      traefik.http.routers.minio.tls: true
      traefik.http.services.minio.loadbalancer.server.port: 9000

  minio-bucket:
    image: minio/mc:latest
    volumes:
      - minio-data:/data
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        sleep 1
        mc alias set minio http://minio:9000 minioadmin miniopassword
        mc mb minio/data-transfer
        sleep infinity
    depends_on:
      - minio

  openfga:
    image: openfga/openfga:latest
    command:
      - run
    expose: 
      - 8080
    labels:
      traefik.enable: true
      traefik.http.routers.openfga.entrypoints: external
      traefik.http.routers.openfga.rule: Host(`localhost`) && PathPrefix(`/hps/fga`)
      traefik.http.routers.openfga.service: openfga
      traefik.http.routers.openfga.tls: true
      traefik.http.services.openfga.loadbalancer.server.port: 8080
      traefik.http.routers.openfga.middlewares: openfga-strip-prefix
      traefik.http.middlewares.openfga-strip-prefix.stripprefix.prefixes: /hps/fga

  data-transfer:
    image: ${DOCKER_REPO}/hps/datad:${DTS_TAG}
    deploy:
      replicas: 1
    expose:
      - 1090
    command:
      - --config /app/config.json
      - --host=0.0.0.0
      - -v 3
      - --docs
      - --debug
      - --external-url=https://${EXTERNAL_NAME}:${EXTERNAL_PORT}/hps/dt
      - --auth-url=https://${EXTERNAL_NAME}:${EXTERNAL_PORT}/hps/auth/realms/rep
    volumes:
      - ./config/dts/config.json:/app/config.json
    extra_hosts:
      - "s3.localhost:host-gateway"
      - "localhost:host-gateway"
    labels:
      traefik.http.routers.dts.rule: PathPrefix(`/hps/dt`)
      traefik.http.routers.dts.tls: true
      traefik.http.routers.dts.priority: 100
      traefik.http.routers.dts.entrypoints: external
      traefik.http.routers.dts.middlewares: dts-hps-stripprefix
      traefik.http.middlewares.dts-hps-stripprefix.stripprefix.prefixes: /hps/dt
      traefik.http.services.dts.loadbalancer.server.port: 1090
      traefik.http.services.dts.loadbalancer.healthcheck.path: /api/v1
      traefik.http.services.dts.loadbalancer.healthcheck.interval: 5s
      traefik.http.services.dts.loadbalancer.healthcheck.timeout: 20s