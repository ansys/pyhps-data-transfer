# coding: utf-8

"""
    HPS Data Transfer Server API

    [WIP].  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictFloat, StrictStr, conlist
from openapi_client.models.ops_operation_state import OpsOperationState

class OpsOperation(BaseModel):
    """
    OpsOperation
    """
    children: Optional[conlist(StrictStr)] = None
    description: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    messages: Optional[conlist(StrictStr)] = None
    progress: Optional[StrictFloat] = None
    result: Optional[Dict[str, Any]] = None
    state: Optional[OpsOperationState] = None
    __properties = ["children", "description", "error", "id", "messages", "progress", "result", "state"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpsOperation:
        """Create an instance of OpsOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpsOperation:
        """Create an instance of OpsOperation from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OpsOperation.parse_obj(obj)

        _obj = OpsOperation.parse_obj({
            "children": obj.get("children"),
            "description": obj.get("description"),
            "error": obj.get("error"),
            "id": obj.get("id"),
            "messages": obj.get("messages"),
            "progress": obj.get("progress"),
            "result": obj.get("result"),
            "state": obj.get("state")
        })
        return _obj

