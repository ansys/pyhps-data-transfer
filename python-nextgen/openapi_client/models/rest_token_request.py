# coding: utf-8

"""
    HPS Data Transfer Server API

    [WIP].  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class RestTokenRequest(BaseModel):
    """
    RestTokenRequest
    """
    other: Optional[Dict[str, Any]] = Field(None, description="For custom use")
    read: Optional[conlist(StrictStr)] = None
    write: Optional[conlist(StrictStr)] = None
    __properties = ["other", "read", "write"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RestTokenRequest:
        """Create an instance of RestTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RestTokenRequest:
        """Create an instance of RestTokenRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return RestTokenRequest.parse_obj(obj)

        _obj = RestTokenRequest.parse_obj({
            "other": obj.get("other"),
            "read": obj.get("read"),
            "write": obj.get("write")
        })
        return _obj

