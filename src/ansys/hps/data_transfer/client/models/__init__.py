# Copyright (C) 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# generated by datamodel-codegen

import enum

from .models import *  # noqa: F403, F401

# from .models import State as OperationState


# Create an alias for model.State to maintain backward compatibility
# OperationState = enum.Enum("OperationState", {k.title(): v for k, v in models.State._member_map_.items()})
class OperationState(enum.Enum):
    """Alias for models.State to maintain backward compatibility."""

    Unknown = models.State.unknown.value  # noqa: F405
    Queued = models.State.queued.value  # noqa: F405
    Running = models.State.running.value  # noqa: F405
    Succeeded = models.State.succeeded.value  # noqa: F405
    Failed = models.State.failed.value  # noqa: F405

    def __repr__(self):
        return f"<State.{self.name.lower()}: '{self.name.lower()}'>"

    def __str__(self):
        return f"State.{self.name.lower()}"

    def __hash__(self):
        return models.State.__hash__()  # noqa: F405

    def __eq__(self, other):
        return self.value == other.value
