
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/startup/data_transfer_runner.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_startup_data_transfer_runner.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_startup_data_transfer_runner.py:


.. _ref_runner:

=========================
Start PyHPS Data Transfer
=========================

This example script starts a data transfer service client and queries available storage.

Example usage:
``python examples/data_transfer_runner.py --debug``

.. GENERATED FROM PYTHON SOURCE LINES 35-91

.. code-block:: Python


    import json
    import logging
    import time

    import typer
    from typing_extensions import Annotated

    from ansys.hps.data_transfer.client import Client, DataTransferApi
    from ansys.hps.data_transfer.client.authenticate import authenticate


    def main(
        debug: Annotated[bool, typer.Option(help="Enable debug logging")] = False,
        url: Annotated[str, typer.Option(help="HPS URL to connect to")] = "https://localhost:8443/hps",
        username: Annotated[str, typer.Option(help="Username to authenticate with")] = "repadmin",
        password: Annotated[
            str, typer.Option(prompt=True, hide_input=True, help="Password to authenticate with")
        ] = "repadmin",
    ):

        auth_url = f"{url}/auth/realms/rep"
        log = logging.getLogger()
        logging.basicConfig(format="%(levelname)8s > %(message)s", level=logging.DEBUG)

        user_token = authenticate(username=username, password=password, verify=False, url=auth_url)
        user_token = user_token.get("access_token", None)
        assert user_token is not None

        client = Client()
        client.binary_config.update(
            verbosity=3,
            debug=debug,
            insecure=True,
            token=user_token,
        )

        client.binary_config.debug = True
        client.start()
        api = DataTransferApi(client)
        s = api.status(wait=True)
        log.info("Status: %s" % s)

        log.info("Available storage:")
        for d in api.storages():
            log.info(f"- {json.dumps(d, indent=4)}")

        for i in range(10):
            log.info("Idling for a while...")
            time.sleep(2)

        client.stop()


    if __name__ == "__main__":
        typer.run(main)


.. _sphx_glr_download_examples_startup_data_transfer_runner.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: data_transfer_runner.ipynb <data_transfer_runner.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: data_transfer_runner.py <data_transfer_runner.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: data_transfer_runner.zip <data_transfer_runner.zip>`
