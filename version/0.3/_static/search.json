[{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/jitter/index.html#the-jitterpy-module","title":"The jitter.py module","text":"The jitter.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/jitter/index.html#summary","title":"The jitter.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nget_expo_backoff\n\nGet the backoff value."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/jitter/index.html#description","title":"The jitter.py module > Description","text":"Description\n\nProvides utilities for implementing exponential backoff with optional jitter.\n\nThis module is commonly used in retry mechanisms to handle transient errors in distributed systems."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/jitter/index.html#module-detail","title":"The jitter.py module > Module detail","text":"Module detail\n\n\n\njitter.get_expo_backoff(base: float, attempts: int = 1, cap: float = 100000000, attempts_cap: int = 100000000, jitter: bool = True)\n\nGet the backoff value.\n\nFor more information, see Exponential Backoff And Jitter\nin the AWS documentation.\n\nParameters\n\nbase\n\npython:float\n\nTime to sleep in the first attempt.\n\nattempts\n\npython:int, default: 1\n\nNumber of attempts that have already been made.\n\ncap\n\npython:float, default: 100000000\n\nMaximum value that can be returned.\n\njitter\n\nbool, default: python:True\n\nWhether to apply jitter to the returned value."},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#set-and-query-permissions","title":"Set and query permissions","text":"Set and query permissions\n\nThis example script sets and queries permissions on files and\ndirectories using the data transfer service.\n\nExample usage:\npython examples/set_permissions_example.py --local-path=examples/basic/files/hello"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#define-a-method-to-get-the-user-id-of-repuser-from-keycloak","title":"Set and query permissions > Define a method to get the user ID of repuser` from Keycloak","text":"Define a method to get the user ID of repuser` from Keycloak"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#define-a-method-to-set-and-query-permissions-on-files-and-directories","title":"Set and query permissions > Define a method to set and query permissions on files and directories","text":"Define a method to set and query permissions on files and directories"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#copy-files-as-repuser","title":"Set and query permissions > Copy files as repuser","text":"Copy files as repuser"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#create-a-data-transfer-client-for-repadmin","title":"Set and query permissions > Create a data transfer client for repadmin","text":"Create a data transfer client for repadmin"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#grant-repuser-the-necessary-permissions","title":"Set and query permissions > Grant repuser the necessary permissions","text":"Grant repuser the necessary permissions"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#verify-permissions-for-repuser","title":"Set and query permissions > Verify permissions for repuser","text":"Verify permissions for repuser"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#list-files-in-the-target-directory-as-repadmin","title":"Set and query permissions > List files in the target directory as repadmin","text":"List files in the target directory as repadmin"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#download-files-to-downloaded-directory","title":"Set and query permissions > Download files to downloaded directory","text":"Download files to downloaded directory"},{"objectID":"Home","href":"examples/permissions/set_permissions_example.html#define-the-main-function","title":"Set and query permissions > Define the main function","text":"Define the main function\n\n\n\nDownload Jupyter notebook: set_permissions_example.ipynb\n\nDownload Python source code: set_permissions_example.py\n\nDownload zipped: set_permissions_example.zip"},{"objectID":"Home","href":"examples/basic/01_async_data_transfer_client.html#run-file-operations-asynchronously","title":"Run file operations asynchronously","text":"Run file operations asynchronously\n\nThis exammple script is intended to be run from the command line. It\nauthenticates with the specified HPS service and sets up an asynchronous\nclient for data transfer operations. It then transfers files to and from remote backends\nusing the data transfer service.\n\nExample usage:\npython examples/async_data_transfer_client.py --url \"https://example.com/hps\" --username \"user\" --password \"pass\""},{"objectID":"Home","href":"examples/basic/01_async_data_transfer_client.html#create-an-asyncclient-instance","title":"Run file operations asynchronously > Create an AsyncClient instance","text":"Create an AsyncClient instance"},{"objectID":"Home","href":"examples/basic/01_async_data_transfer_client.html#create-an-asyncdatatransferapi-instance","title":"Run file operations asynchronously > Create an AsyncDataTransferApi instance","text":"Create an AsyncDataTransferApi instance"},{"objectID":"Home","href":"examples/basic/01_async_data_transfer_client.html#get-available-storages","title":"Run file operations asynchronously > Get available storages","text":"Get available storages"},{"objectID":"Home","href":"examples/basic/01_async_data_transfer_client.html#run-file-operations","title":"Run file operations asynchronously > Run file operations","text":"Run file operations\n\n\n\nDownload Jupyter notebook: 01_async_data_transfer_client.ipynb\n\nDownload Python source code: 01_async_data_transfer_client.py\n\nDownload zipped: 01_async_data_transfer_client.zip"},{"objectID":"Home","href":"user_guide/run_async.html#run-operations-asynchronously","title":"Run operations asynchronously","text":"Run operations asynchronously\n\nRun data transfer client operations asynchronously to improve performance and responsiveness."},{"objectID":"Home","href":"user_guide/run_async.html#connect-to-a-data-transfer-service-client","title":"Run operations asynchronously > Connect to a data transfer service client","text":"Connect to a data transfer service client\n\nUse the access token to connect to the data transfer service client:\n\nRun this command to query available storages:"},{"objectID":"Home","href":"user_guide/run_async.html#create-a-directory","title":"Run operations asynchronously > Create a directory","text":"Create a directory\n\nCreate a directory in the storage location:"},{"objectID":"Home","href":"user_guide/run_async.html#copy-files","title":"Run operations asynchronously > Copy files","text":"Copy files\n\nCopy files between storage locations:"},{"objectID":"Home","href":"user_guide/run_async.html#list-files","title":"Run operations asynchronously > List files","text":"List files\n\nList files in a specified directory:"},{"objectID":"Home","href":"user_guide/run_async.html#get-metadata","title":"Run operations asynchronously > Get metadata","text":"Get metadata\n\nGet metadata for a file in a specified directory:"},{"objectID":"Home","href":"user_guide/run_async.html#remove-files","title":"Run operations asynchronously > Remove files","text":"Remove files\n\nDelete files in a specified directory:"},{"objectID":"Home","href":"user_guide/run_async.html#stop-client","title":"Run operations asynchronously > Stop client","text":"Stop client\n\nStop the client:"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#the-clientpy-module","title":"The client.py module","text":"The client.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#summary","title":"The client.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nMonitorState\n\nProvides for monitoring and tracking the state of the worker binary.\n\nClientBase\n\nProvides the Python client to the HPS data transfer APIs.\n\nAsyncClient\n\nProvides an async interface to the Python client to the HPS data transfer APIs.\n\nClient\n\nProvides the Python client to the HPS data transfer APIs.\n\nFunctions\n\n\n\n\n\nbin_in_use\n\nCheck if a binary is in use.\n\nflatten_features\n\nFlatten a nested dictionary into a list of strings.\n\nAttributes\n\n\n\n\n\nlogger\n\n\n\napi_key_header_env\n\n\n\napi_key_value_env\n\n\n\nlog\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#description","title":"The client.py module > Description","text":"Description\n\nProvides the Python client to the HPS data transfer APIs."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#module-detail","title":"The client.py module > Module detail","text":"Module detail\n\n\n\nclass client.MonitorState\n\nProvides for monitoring and tracking the state of the worker binary."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#overview","title":"The client.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nreset\n\nReset the monitor state to the initial values.\n\nmark_ready\n\nMark the worker as ready or not ready.\n\nmark_failed\n\nMark the worker as failed.\n\nreport\n\nReport the worker status.\n\nProperties\n\n\n\n\n\nsleep_for\n\nSleep time based on the worker state."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#import-detail","title":"The client.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#property-detail","title":"The client.py module > Property detail","text":"Property detail\n\n\n\nproperty MonitorState.sleep_for\n\nSleep time based on the worker state."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#method-detail","title":"The client.py module > Method detail","text":"Method detail\n\n\n\nMonitorState.reset()\n\nReset the monitor state to the initial values.\n\n\n\nMonitorState.mark_ready(ready)\n\nMark the worker as ready or not ready.\n\n\n\nMonitorState.mark_failed(exc=None, binary=None)\n\nMark the worker as failed.\n\n\n\nMonitorState.report(binary)\n\nReport the worker status.\n\n\n\nclass MonitorState.ClientBase(bin_config: ansys.hps.data_transfer.client.binary.BinaryConfig = None, download_dir: str = 'dt_download', clean=False, clean_dev=True, check_in_use=True, timeout=60.0, retries=10)\n\nProvides the Python client to the HPS data transfer APIs.\n\nThis class uses the provided credentials to create and store\nan authorized requests.Session object.\n\nParameters\n\nbin_config: BinaryConfig, default: None\n\nBinary configuration. If no configuration is provided, a default BinaryConfig object is created.\n\ndownload_dir: str, default: “dt_download”\n\nPath to the download directory.\n\nclean: bool, default: False\n\nWhether to clean the path to the download directory.\n\nclean_dev: bool, default: True\n\nWhether to clean the path to the download directory if the binary is from the development branch.\n\ncheck_in_use: bool, default: True\n\nWhether to check if the binary is in use and skip downloading a new binary.\n\ntimeout: float, default: 60.0\n\nTimeout for the session. This is the maximum time to wait for a response from the server.\n\nretries: int, default: 1\n\nNumber of times to retry the operation.\n\nExamples:\n\n\n\n——–\n\n\n\nCreate a client object and connect to HPS data transfer with an access token.\n\n\n\n>>> from ansys.hps.data_transfer.client import Client\n\n\n\n>>> token = authenticate(username=username, password=password, verify=False, url=auth_url)\n\n\n\n>>> token = token.get(“access_token”, None)\n\n\n\n>>> client = Client(clean=True)\n\n\n\n>>> client.binary_config.update(\n\nverbosity=3,\ndebug=False,\ninsecure=True,\ntoken=token,\ndata_transfer_url=dt_url,\n\n)\n\n>>> client.start()\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#overview","title":"The client.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart the client session using the binary configuration credentials.\n\nstop\n\nStop the client session.\n\nhas\n\nCheck if the feature is available using a dot notation.\n\nProperties\n\n\n\n\n\nretries\n\nNumber of retries.\n\nbinary_config\n\nBinary configuration.\n\nbase_api_url\n\nAPI URL from the configuration.\n\nsession\n\nSession object. If one does not exist, a new one is created.\n\nis_started\n\nFlag indicating if the binary is up and running.\n\ntimeout\n\nTimeout for the session.\n\nAttributes\n\n\n\n\n\nbinary\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#import-detail","title":"The client.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#property-detail","title":"The client.py module > Property detail","text":"Property detail\n\n\n\nproperty ClientBase.retries\n\nNumber of retries.\n\n\n\nproperty ClientBase.binary_config\n\nBinary configuration.\n\n\n\nproperty ClientBase.base_api_url\n\nAPI URL from the configuration.\n\n\n\nproperty ClientBase.session\n\nSession object. If one does not exist, a new one is created.\n\n\n\nproperty ClientBase.is_started\n\nFlag indicating if the binary is up and running.\n\n\n\nproperty ClientBase.timeout\n\nTimeout for the session."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#attribute-detail","title":"The client.py module > Attribute detail","text":"Attribute detail\n\n\n\nClientBase.binary = None\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#method-detail","title":"The client.py module > Method detail","text":"Method detail\n\n\n\nClientBase.start()\n\nStart the client session using the binary configuration credentials.\n\n\n\nClientBase.stop(wait=5.0)\n\nStop the client session.\n\n\n\nClientBase.has(feature)\n\nCheck if the feature is available using a dot notation.\n\n\n\nclass ClientBase.AsyncClient(*args, **kwargs)\n\nProvides an async interface to the Python client to the HPS data transfer APIs."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#overview","title":"The client.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart the async binary worker.\n\nstop\n\nStop the async binary worker.\n\nwait\n\nWait on the async binary worker."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#import-detail","title":"The client.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#method-detail","title":"The client.py module > Method detail","text":"Method detail\n\n\n\nasync AsyncClient.start()\n\nStart the async binary worker.\n\n\n\nasync AsyncClient.stop(wait=5.0)\n\nStop the async binary worker.\n\n\n\nasync AsyncClient.wait(timeout: float = 60.0, sleep=0.5)\n\nWait on the async binary worker.\n\n\n\nclass AsyncClient.Client(*args, **kwargs)\n\nProvides the Python client to the HPS data transfer APIs.\n\nThis class uses the provided credentials to create and store\nan authorized requests.Session object."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#overview","title":"The client.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart the client session using the binary configuration credentials.\n\nstop\n\nStop the client session.\n\nwait\n\nWait on the worker binary to start."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#import-detail","title":"The client.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/client/index.html#method-detail","title":"The client.py module > Method detail","text":"Method detail\n\n\n\nClient.start()\n\nStart the client session using the binary configuration credentials.\n\n\n\nClient.stop(wait=5.0)\n\nStop the client session.\n\n\n\nClient.wait(timeout: float = 60.0, sleep=0.5)\n\nWait on the worker binary to start.\n\n\n\nClient.bin_in_use(bin_path)\n\nCheck if a binary is in use.\n\n\n\nClient.flatten_features(y, separator='.')\n\nFlatten a nested dictionary into a list of strings.\n\n\n\nClient.logger\n\n\n\n\n\nClient.api_key_header_env = 'ANSYS_DT_AUTH__API_KEY__HEADER_NAME'\n\n\n\n\n\nClient.api_key_value_env = 'ANSYS_DT_AUTH__API_KEY__VALUE'\n\n\n\n\n\nClient.log\n\n"},{"objectID":"Home","href":"examples/transfer_files/transfer_files.html#transfer-files","title":"Transfer files","text":"Transfer files\n\nThis example script transfers files to remote backends and back using the data transfer service.\nThe local-path argument is the path to the files or directory to transfer. Wildcards are supported.\n\nExample usage: python examples/transfer_files.py --local_path=examples/basic/files/* --remote-path=hello --debug"},{"objectID":"Home","href":"examples/transfer_files/transfer_files.html#perform-necessary-imports","title":"Transfer files > Perform necessary imports","text":"Perform necessary imports"},{"objectID":"Home","href":"examples/transfer_files/transfer_files.html#define-a-method-to-transfer-files-using-the-data-transfer-service","title":"Transfer files > Define a method to transfer files using the data transfer service","text":"Define a method to transfer files using the data transfer service"},{"objectID":"Home","href":"examples/transfer_files/transfer_files.html#define-the-main-function","title":"Transfer files > Define the main function","text":"Define the main function"},{"objectID":"Home","href":"examples/transfer_files/transfer_files.html#create-a-client-instance","title":"Transfer files > Create a Client instance","text":"Create a Client instance"},{"objectID":"Home","href":"examples/transfer_files/transfer_files.html#create-a-datatransferapi-instance","title":"Transfer files > Create a DataTransferApi instance","text":"Create a DataTransferApi instance"},{"objectID":"Home","href":"examples/transfer_files/transfer_files.html#get-available-storages","title":"Transfer files > Get available storages","text":"Get available storages\n\n\n\nDownload Jupyter notebook: transfer_files.ipynb\n\nDownload Python source code: transfer_files.py\n\nDownload zipped: transfer_files.zip"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#the-permissionspy-module","title":"The permissions.py module","text":"The permissions.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#summary","title":"The permissions.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nResource\n\n!!! abstract “Usage Documentation”\n\nSubject\n\n!!! abstract “Usage Documentation”\n\nRoleAssignment\n\n!!! abstract “Usage Documentation”\n\nRoleQuery\n\n!!! abstract “Usage Documentation”\n\nEnums\n\n\n\n\n\nResourceType\n\nCreate a collection of name/value pairs.\n\nRoleType\n\nCreate a collection of name/value pairs.\n\nSubjectType\n\nCreate a collection of name/value pairs."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#module-detail","title":"The permissions.py module > Module detail","text":"Module detail\n\n\n\nclass permissions.Resource(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#overview","title":"The permissions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npath\n\n\n\ntype\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#import-detail","title":"The permissions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#attribute-detail","title":"The permissions.py module > Attribute detail","text":"Attribute detail\n\n\n\nResource.path: str | None = 'my/path/to/data/file.txt'\n\n\n\n\n\nResource.type: ResourceType | None = None\n\n\n\n\n\nclass Resource.Subject(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#overview","title":"The permissions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nid\n\n\n\ntype\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#import-detail","title":"The permissions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#attribute-detail","title":"The permissions.py module > Attribute detail","text":"Attribute detail\n\n\n\nSubject.id: str | None = '946991ec-828c-4de4-acbe-962ada8bc441'\n\n\n\n\n\nSubject.type: SubjectType | None = None\n\n\n\n\n\nclass Subject.RoleAssignment(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#overview","title":"The permissions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nresource\n\n\n\nrole\n\n\n\nsubject\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#import-detail","title":"The permissions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#attribute-detail","title":"The permissions.py module > Attribute detail","text":"Attribute detail\n\n\n\nRoleAssignment.resource: Resource | None = None\n\n\n\n\n\nRoleAssignment.role: RoleType | None = None\n\n\n\n\n\nRoleAssignment.subject: Subject | None = None\n\n\n\n\n\nclass RoleAssignment.RoleQuery(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#overview","title":"The permissions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nresource\n\n\n\nrole\n\n\n\nsubject\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#import-detail","title":"The permissions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#attribute-detail","title":"The permissions.py module > Attribute detail","text":"Attribute detail\n\n\n\nRoleQuery.resource: Resource | None = None\n\n\n\n\n\nRoleQuery.role: RoleType | None = None\n\n\n\n\n\nRoleQuery.subject: Subject | None = None\n\n\n\n\n\nclass RoleQuery.ResourceType(*args, **kwds)\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#overview","title":"The permissions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nDoc\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#import-detail","title":"The permissions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#attribute-detail","title":"The permissions.py module > Attribute detail","text":"Attribute detail\n\n\n\nResourceType.Doc = 'document'\n\n\n\n\n\nclass ResourceType.RoleType(*args, **kwds)\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#overview","title":"The permissions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nReader\n\n\n\nWriter\n\n\n\nAdmin\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#import-detail","title":"The permissions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#attribute-detail","title":"The permissions.py module > Attribute detail","text":"Attribute detail\n\n\n\nRoleType.Reader = 'reader'\n\n\n\n\n\nRoleType.Writer = 'writer'\n\n\n\n\n\nRoleType.Admin = 'admin'\n\n\n\n\n\nclass RoleType.SubjectType(*args, **kwds)\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#overview","title":"The permissions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nUser\n\n\n\nGroup\n\n\n\nAny\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#import-detail","title":"The permissions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/permissions/index.html#attribute-detail","title":"The permissions.py module > Attribute detail","text":"Attribute detail\n\n\n\nSubjectType.User = 'user'\n\n\n\n\n\nSubjectType.Group = 'group'\n\n\n\n\n\nSubjectType.Any = 'any'\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/authenticate/index.html#the-authenticatepy-module","title":"The authenticate.py module","text":"The authenticate.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/authenticate/index.html#summary","title":"The authenticate.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nauthenticate\n\nAuthenticate the user with a password or refresh token against the HPS authentication service.\n\nAttributes\n\n\n\n\n\nlog\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/authenticate/index.html#description","title":"The authenticate.py module > Description","text":"Description\n\nProvides authentication for the user with a password or refresh token.\n\nThis module interacts with the HPS authentication service."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/authenticate/index.html#module-detail","title":"The authenticate.py module > Module detail","text":"Module detail\n\n\n\nauthenticate.authenticate(url: str = 'https://localhost:8443/hps', realm: str = 'rep', grant_type: str = 'password', scope='openid', client_id: str = 'rep-cli', client_secret: str = None, username: str = None, password: str = None, refresh_token: str = None, timeout: float = 10.0, verify: bool | str = True, **kwargs)\n\nAuthenticate the user with a password or refresh token against the HPS authentication service.\n\nIf this method is successful, the response includes access and refresh tokens.\n\nParameters\n\nurl\n\npython:str, default: ‘https://localhost:8443/hps’\n\nBase path for the server to call.\n\nrealm\n\npython:str, default: ‘rep’\n\nName of the Keycloak realm.\n\ngrant_type: str, default: ‘password’\n\nAuthentication method.\n\nscope\n\npython:str, default: ‘openid’\n\nString containing one or more requested scopes.\n\nclient_id\n\npython:str, default: ‘rep-cli’\n\nClient type.\n\nclient_secret\n\npython:str, default: python:None\n\nClient secret.\n\nusername\n\npython:str\n\nUsername.\n\npassword\n\npython:str\n\nPassword.\n\nrefresh_token\n\npython:str\n\nRefresh token.\n\ntimeout\n\npython:float, default: 10.0\n\nTimeout in seconds.\n\nverify: Union[bool, str]\n\nIf a Boolean, whether to verify the server’s TLS certificate. If a string, the\npath to the CA bundle to use. For more information, see the requests.Session\ndocumentation.\n\n\n\nauthenticate.log\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/index.html#the-api-package","title":"The api package","text":"The api package\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/index.html#summary","title":"The api package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\napi\n\nProvides the core API functionality for interacting with the Ansys HPS data transfer client.\n\nasync_api\n\nProvides asynchronous API functionality for interacting with the Ansys HPS data transfer client.\n\nretry\n\nProvides utilities for implementing retry mechanisms in the Ansys HPS data transfer client.\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/index.html#description","title":"The api package > Description","text":"Description\n\nPyHPS data transfer API subpackage."},{"objectID":"Home","href":"examples/basic/index.html#basic-usage-examples","title":"Basic usage examples","text":"Basic usage examples\n\nThese examples show how to use PyHPS Data Transfer to run file operations both synchronously and asynchronously.\n\nsphx_glr_examples_basic_01_async_data_transfer_client.py\n\nsphx_glr_examples_basic_00_file_operations_client.py\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nThis section describes how to install PyHPS Data Transfer in user mode. If you are interested in contributing\nto PyHPS Data Transfer, see contribute for information on installing in developer mode."},{"objectID":"Home","href":"getting_started/index.html#prerequisites","title":"Getting started > Prerequisites","text":"Prerequisites\n\nYou must have pip and Python 3.9, 3.10, 3.11, or 3.12 installed.\n\nTo see if a Python 3.x version is installed and available from your command line,\nrun this command:\n\nIf a Python 3.x version is not available, install the latest 3.x version from the\nPython organization’s Downloads page.\n\nTo see if you have pip installed, run this command:\n\nIf pip is not installed, see Installing Packages\nin the Python Packaging User Guide.\n\nTo ensure that you have the latest version of pip, run this command:"},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nTo install PyHPS Data Transfer in user mode, run this command:\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/otel_config/index.html#the-otel_configpy-module","title":"The otel_config.py module","text":"The otel_config.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/otel_config/index.html#summary","title":"The otel_config.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nset_otel_config\n\nSet data transfer worker Otel configuration using environment variables before starting the data transfer worker."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/otel_config/index.html#description","title":"The otel_config.py module > Description","text":"Description\n\nProvides utilities for configuring OpenTelemetry (Otel) settings for the Ansys HPS data transfer client.\n\nThis module allows setting up environment variables required\nfor telemetry data export and resource attributes."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/otel_config/index.html#module-detail","title":"The otel_config.py module > Module detail","text":"Module detail\n\n\n\notel_config.set_otel_config(exporter_url, resource_attributes=None, headers=None, exporter_type=None)\n\nSet data transfer worker Otel configuration using environment variables before starting the data transfer worker.\n\nANSYS_DT_OTEL__EXPORTER_URL - Otel exporter url.\nANSYS_DT_OTEL__RESOURCE_ATTRIBUTES - key-value pairs of resource attributes to be passed to the Otel SDK.\nANSYS_DT_OTEL__HEADERS - key-value pairs of headers to be associated with gRPC requests.\nANSYS_DT_OTEL__EXPORTER_TYPE - Otel exporter type.\nANSYS_DT_OTEL__ENABLED - enables Otel."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/core/index.html#the-corepy-module","title":"The core.py module","text":"The core.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/core/index.html#summary","title":"The core.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nErrorResponse\n\n!!! abstract “Usage Documentation”"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/core/index.html#module-detail","title":"The core.py module > Module detail","text":"Module detail\n\n\n\nclass core.ErrorResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/core/index.html#overview","title":"The core.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nerror\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/core/index.html#import-detail","title":"The core.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/core/index.html#attribute-detail","title":"The core.py module > Attribute detail","text":"Attribute detail\n\n\n\nErrorResponse.error: str | None = 'something bad happened'\n\n"},{"objectID":"Home","href":"examples/permissions/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 1 file from examples/permissions:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_permissions_set_permissions_example.py (set_permissions_example.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"examples/transfer_files/index.html#transfer-files-using-pyhps-data-transfer","title":"Transfer files using PyHPS Data Transfer","text":"Transfer files using PyHPS Data Transfer\n\nThis example shows some of the main data transfer client calls, like how to transfer files to remote backends,\nlist files on a given path, and download a file from remote backends to local storage.\n\nsphx_glr_examples_transfer_files_transfer_files.py\n\n"},{"objectID":"Home","href":"examples/basic/00_file_operations_client.html#run-file-operations-synchronously","title":"Run file operations synchronously","text":"Run file operations synchronously\n\nThis example script is intended to be run from the command line.\nIt runs the specified file operations synchronously based on the provided arguments.\n\nExample usage:\npython examples/file_operations_client.py --local-path=examples/basic/files/* --remote-path=hello --debug"},{"objectID":"Home","href":"examples/basic/00_file_operations_client.html#run-file-operations","title":"Run file operations synchronously > Run file operations","text":"Run file operations"},{"objectID":"Home","href":"examples/basic/00_file_operations_client.html#define-the-main-function","title":"Run file operations synchronously > Define the main function","text":"Define the main function\n\n\n\nDownload Jupyter notebook: 00_file_operations_client.ipynb\n\nDownload Python source code: 00_file_operations_client.py\n\nDownload zipped: 00_file_operations_client.zip"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#the-metadatapy-module","title":"The metadata.py module","text":"The metadata.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#summary","title":"The metadata.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDataAssignment\n\n!!! abstract “Usage Documentation”\n\nDataAssignments\n\n\n\nSrcDst\n\n!!! abstract “Usage Documentation”"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#module-detail","title":"The metadata.py module > Module detail","text":"Module detail\n\n\n\nclass metadata.DataAssignment(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#overview","title":"The metadata.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\ncompressed_size\n\n\n\ncompression\n\n\n\ncustom\n\n\n\nuncompressed_size\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#import-detail","title":"The metadata.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#attribute-detail","title":"The metadata.py module > Attribute detail","text":"Attribute detail\n\n\n\nDataAssignment.compressed_size: int | None = None\n\n\n\n\n\nDataAssignment.compression: str | None = None\n\n\n\n\n\nDataAssignment.custom: dict[str, Any] | None = None\n\n\n\n\n\nDataAssignment.uncompressed_size: int | None = None\n\n\n\n\n\nclass DataAssignment.DataAssignments\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#overview","title":"The metadata.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nroot\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#import-detail","title":"The metadata.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#attribute-detail","title":"The metadata.py module > Attribute detail","text":"Attribute detail\n\n\n\nDataAssignments.root: dict[str, DataAssignment] | None = None\n\n\n\n\n\nclass DataAssignments.SrcDst(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#overview","title":"The metadata.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\ndst\n\n\n\nsrc\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#import-detail","title":"The metadata.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/metadata/index.html#attribute-detail","title":"The metadata.py module > Attribute detail","text":"Attribute detail\n\n\n\nSrcDst.dst: str\n\n\n\n\n\nSrcDst.src: str\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#the-exceptionspy-module","title":"The exceptions.py module","text":"The exceptions.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#summary","title":"The exceptions.py module > Summary","text":"Summary\n\nExceptions\n\n\n\n\n\nHPSError\n\nProvides the base class for all HPS-related errors.\n\nAPIError\n\nProvides server-side related errors.\n\nClientError\n\nProvides client-side related errors.\n\nBinaryError\n\nProvides binary-related errors.\n\nNotReadyError\n\nProvides not ready-related errors.\n\nTimeoutError\n\nProvides timeout-related errors.\n\nFunctions\n\n\n\n\n\nraise_for_status\n\nAutomatically check for HTTP errors.\n\nasync_raise_for_status\n\nAutomatically check for HTTP errors."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#description","title":"The exceptions.py module > Description","text":"Description\n\nProvides the base class for all client and server HPS-related errors."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#module-detail","title":"The exceptions.py module > Module detail","text":"Module detail\n\n\n\nexception exceptions.HPSError(*args, **kwargs)\n\nProvides the base class for all HPS-related errors.\n\nThis class derives from the requests.exceptions.RequestException\nbase class.\n\nExample:\n\n>>> from ansys.hps.client import HPSError\n>>> from ansys.hps.client.jms import Client\n>>> try:\n>>>     client = Client(url=\"https://127.0.0.1:8443/hps/\",\n                        username=\"repuser\",\n                        password=\"wrong_psw\")\n>>> except HPSError as e:\n>>>     print(e)\n401 Client Error: invalid_grant for: POST https://127.0.0.1:8443/hps/auth...\nInvalid user credentials"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#overview","title":"The exceptions.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nreason\n\n\n\ndescription\n\n\n\ngive_up\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#import-detail","title":"The exceptions.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#attribute-detail","title":"The exceptions.py module > Attribute detail","text":"Attribute detail\n\n\n\nHPSError.reason\n\n\n\n\n\nHPSError.description\n\n\n\n\n\nHPSError.give_up\n\n\n\n\n\nexception HPSError.APIError(*args, **kwargs)\n\nProvides server-side related errors."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#import-detail","title":"The exceptions.py module > Import detail","text":"Import detail\n\n\n\nexception HPSError.ClientError(*args, **kwargs)\n\nProvides client-side related errors."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#import-detail","title":"The exceptions.py module > Import detail","text":"Import detail\n\n\n\nexception HPSError.BinaryError(*args, **kwargs)\n\nProvides binary-related errors."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#import-detail","title":"The exceptions.py module > Import detail","text":"Import detail\n\n\n\nexception HPSError.NotReadyError(*args, **kwargs)\n\nProvides not ready-related errors."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#import-detail","title":"The exceptions.py module > Import detail","text":"Import detail\n\n\n\nexception HPSError.TimeoutError(*args, **kwargs)\n\nProvides timeout-related errors."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/exceptions/index.html#import-detail","title":"The exceptions.py module > Import detail","text":"Import detail\n\n\n\nHPSError.raise_for_status(response: httpx.Response)\n\nAutomatically check for HTTP errors.\n\nThis method mimics the requests.Response.raise_for_status() method.\n\n\n\nasync HPSError.async_raise_for_status(response: httpx.Response)\n\nAutomatically check for HTTP errors.\n\nThis method mimics the requests.Response.raise_for_status() method."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/token/index.html#the-tokenpy-module","title":"The token.py module","text":"The token.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/token/index.html#summary","title":"The token.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nprepare_token\n\nPrepare an authentication token by ensuring it is prefixed with Bearer."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/token/index.html#description","title":"The token.py module > Description","text":"Description\n\nProvides a utility function for handling authentication tokens."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/token/index.html#module-detail","title":"The token.py module > Module detail","text":"Module detail\n\n\n\ntoken.prepare_token(token)\n\nPrepare an authentication token by ensuring it is prefixed with Bearer."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#the-apipy-module","title":"The api.py module","text":"The api.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#summary","title":"The api.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDataTransferApi\n\nProvides the data transfer API.\n\nAttributes\n\n\n\n\n\nlog\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#description","title":"The api.py module > Description","text":"Description\n\nProvides the core API functionality for interacting with the Ansys HPS data transfer client.\n\nThis module includes methods and utilities for performing\ndata transfer operations, managing resources, and handling client interactions."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#module-detail","title":"The api.py module > Module detail","text":"Module detail\n\n\n\nclass api.DataTransferApi(client: ansys.hps.data_transfer.client.client.Client)\n\nProvides the data transfer API.\n\nParameters\n\nclient: Client\n\nClient object."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#overview","title":"The api.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstatus\n\nGet the status of the worker binary.\n\noperations\n\nGet a list of operations.\n\nstorages\n\nGet types of storages available on the storage backend.\n\ncopy\n\nGet the API response for copying a list of files.\n\nexists\n\nCheck if a path exists.\n\nlist\n\nList files in a path.\n\nmkdir\n\nCreate a directory.\n\nmove\n\nMove a file on the backend storage.\n\nremove\n\nDelete a file.\n\nrmdir\n\nDelete a directory.\n\ncheck_permissions\n\nCheck permissions of a path (including parent directory) using a list of RoleAssignment objects.\n\nget_permissions\n\nGet permissions of a file from a list of RoleQuery objects.\n\nremove_permissions\n\nRemove permissions using a list of RoleAssignment objects.\n\nset_permissions\n\nSet permissions using a list of RoleAssignment objects.\n\nget_metadata\n\nGet metadata of a path on the backend storage.\n\nset_metadata\n\nSet metadata for a path on the backend storage.\n\nwait_for\n\nWait for operations to complete.\n\nAttributes\n\n\n\n\n\ndump_mode\n\n\n\nclient\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#import-detail","title":"The api.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#attribute-detail","title":"The api.py module > Attribute detail","text":"Attribute detail\n\n\n\nDataTransferApi.dump_mode = 'json'\n\n\n\n\n\nDataTransferApi.client\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/api/index.html#method-detail","title":"The api.py module > Method detail","text":"Method detail\n\n\n\nDataTransferApi.status(wait=False, sleep=5, jitter=True, timeout: float | None = 20.0)\n\nGet the status of the worker binary.\n\n\n\nDataTransferApi.operations(ids: list[str])\n\nGet a list of operations.\n\nParameters\n\nids: List[str]\n\nList of IDs.\n\n\n\nDataTransferApi.storages()\n\nGet types of storages available on the storage backend.\n\n\n\nDataTransferApi.copy(operations: list[ansys.hps.data_transfer.client.models.msg.SrcDst])\n\nGet the API response for copying a list of files.\n\nParameters\n\noperations: List[SrcDst]\n\n\n\n\n\nDataTransferApi.exists(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nCheck if a path exists.\n\nParameters\n\noperations: List[StoragePath]\n\n\n\n\n\nDataTransferApi.list(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nList files in a path.\n\nParameters\n\noperations: List[StoragePath]\n\n\n\n\n\nDataTransferApi.mkdir(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nCreate a directory.\n\nParameters\n\noperations: List[StoragePath]\n\n\n\n\n\nDataTransferApi.move(operations: list[ansys.hps.data_transfer.client.models.msg.SrcDst])\n\nMove a file on the backend storage.\n\nParameters\n\noperations: List[SrcDst]\n\n\n\n\n\nDataTransferApi.remove(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nDelete a file.\n\nParameters\n\noperations: List[StoragePath]\n\n\n\n\n\nDataTransferApi.rmdir(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nDelete a directory.\n\nParameters\n\noperations: List[StoragePath]\n\n\n\n\n\nDataTransferApi.check_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment])\n\nCheck permissions of a path (including parent directory) using a list of RoleAssignment objects.\n\nParameters\n\npermissions: List[RoleAssignment]\n\n\n\n\n\nDataTransferApi.get_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleQuery])\n\nGet permissions of a file from a list of RoleQuery objects.\n\nParameters\n\npermissions: List[RoleQuery]\n\n\n\n\n\nDataTransferApi.remove_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment])\n\nRemove permissions using a list of RoleAssignment objects.\n\nParameters\n\npermissions: List[RoleAssignment]\n\n\n\n\n\nDataTransferApi.set_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment])\n\nSet permissions using a list of RoleAssignment objects.\n\nParameters\n\npermissions: List[RoleAssignment]\n\n\n\n\n\nDataTransferApi.get_metadata(paths: list[str | ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nGet metadata of a path on the backend storage.\n\nParameters\n\npaths: List[str | StoragePath]\n\n\n\n\n\nDataTransferApi.set_metadata(asgs: dict[str | ansys.hps.data_transfer.client.models.msg.StoragePath, ansys.hps.data_transfer.client.models.metadata.DataAssignment])\n\nSet metadata for a path on the backend storage.\n\nParameters\n\nasgs: Dict[str | StoragePath, DataAssignment]\n\nList of paths with key of type string or StoragePath and value of DataAssignment.\n\n\n\nDataTransferApi.wait_for(operation_ids: list[str | ansys.hps.data_transfer.client.models.ops.Operation | ansys.hps.data_transfer.client.models.msg.OpIdResponse], timeout: float | None = None, interval: float = 0.1, cap: float = 2.0, raise_on_error: bool = False, progress_handler: collections.abc.Callable[[str, float], None] = None)\n\nWait for operations to complete.\n\nParameters\n\noperation_ids: List[str | Operation | OpIdResponse]\n\nList of operation ids.\n\ntimeout: float | None\n\nTimeout in seconds. Default is None.\n\ninterval: float\n\nInterval in seconds. Default is 0.1.\n\ncap: float\n\nThe maximum backoff value used to calculate the next wait time. Default is 2.0.\n\nraise_on_error: bool\n\nRaise an exception if an error occurs. Default is False.\n\nprogress_handler: Callable[[str, float], None]\n\nA function to handle progress updates. Default is None.\n\n\n\nDataTransferApi.log\n\n"},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nThe examples in this section show how to use PyHPS Data Transfer to\ninteract in Python with a data transfer service.\nEach example consists of a Python script plus a data file.\n\nYou can use these command-line arguments to execute Python scripts:\n\n--local-path: Path to the files or directory to transfer. This argument supports wildcards. The default is None.\n\n--remote-path: Optional path to the remote directory to transfer files to. The default is None.\n\n--url: HPS URL to connect to. The default is https://localhost:8443/hps.\n\n--username: HPS username. The default is repadmin.\n\n--password: HPS password. The default is repadmin.\n\n--debug: Enable debug logging. The default is no-debug."},{"objectID":"Home","href":"examples/index.html#basic-usage-examples","title":"Examples > Basic usage examples","text":"Basic usage examples\n\nThese examples show how to use PyHPS Data Transfer to run file operations both synchronously and asynchronously.\n\nsphx_glr_examples_basic_01_async_data_transfer_client.py\n\nsphx_glr_examples_basic_00_file_operations_client.py"},{"objectID":"Home","href":"examples/index.html#set-and-query-permissions","title":"Examples > Set and query permissions","text":"Set and query permissions\n\nThis example shows how to set and query permissions on files stored in the remote backend.\n\nsphx_glr_examples_permissions_set_permissions_example.py"},{"objectID":"Home","href":"examples/index.html#start-pyhps-data-transfer","title":"Examples > Start PyHPS Data Transfer","text":"Start PyHPS Data Transfer\n\nThis example shows how to create a data transfer API object using a client and then check for available storages.\n\nsphx_glr_examples_startup_data_transfer_runner.py"},{"objectID":"Home","href":"examples/index.html#transfer-files-using-pyhps-data-transfer","title":"Examples > Transfer files using PyHPS Data Transfer","text":"Transfer files using PyHPS Data Transfer\n\nThis example shows some of the main data transfer client calls, like how to transfer files to remote backends,\nlist files on a given path, and download a file from remote backends to local storage.\n\nsphx_glr_examples_transfer_files_transfer_files.py\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/common/index.html#the-commonpy-module","title":"The common.py module","text":"The common.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/common/index.html#summary","title":"The common.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nUserInfo\n\n!!! abstract “Usage Documentation”"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/common/index.html#module-detail","title":"The common.py module > Module detail","text":"Module detail\n\n\n\nclass common.UserInfo(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/common/index.html#overview","title":"The common.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\naccount_id\n\n\n\ngroups\n\n\n\nid\n\n\n\nis_admin\n\n\n\nroles\n\n\n\nservice_admin\n\n\n\nusername\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/common/index.html#import-detail","title":"The common.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/common/index.html#attribute-detail","title":"The common.py module > Attribute detail","text":"Attribute detail\n\n\n\nUserInfo.account_id: str | None = None\n\n\n\n\n\nUserInfo.groups: list[str] | None = None\n\n\n\n\n\nUserInfo.id: str | None = None\n\n\n\n\n\nUserInfo.is_admin: bool | None = None\n\n\n\n\n\nUserInfo.roles: list[str] | None = None\n\n\n\n\n\nUserInfo.service_admin: bool | None = None\n\n\n\n\n\nUserInfo.username: str | None = None\n\n"},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section explains how to interact with PyHPS Data Transfer.\n\nTo run the code samples in this section, you must have these prerequisites:\n\nA running Ansys HPS installation. For more information, see the\nAnsys HPC Platform Services Deployment Guide\nin the Ansys Help.\n\nA Python shell with PyHPS Data Transfer installed. For more information, see getting_started.\n\n"},{"objectID":"Home","href":"user_guide/index.html#connect-to-a-data-transfer-service-client","title":"User guide > Connect to a data transfer service client","text":"Connect to a data transfer service client\n\nThe data transfer service runs on the localhost with the default username and password. Before you can connect to\na data transfer service client, you must request the access token:\n\nYou can now use this access token to make a connection:\n\nUse this code to query available storages:"},{"objectID":"Home","href":"user_guide/index.html#create-a-directory","title":"User guide > Create a directory","text":"Create a directory\n\nCreate a directory in a storage location:"},{"objectID":"Home","href":"user_guide/index.html#copy-files","title":"User guide > Copy files","text":"Copy files\n\nWhen copying files, the local_path attribute is the path to the\nfiles or directory to copy. The remote_path attribute is the path to\nthe remote directory to copy files to.\n\nThe paths used by the data transfer components follow this format:\n\n[remote or keyword]:/path/to/file.txt\n\nThe [remote or keyword] part can be the name of a specific remote, any, or be left empty. Specifying the name of a remote performs the given command only against it. Specifying any or leaving it empty runs the standard logic of the system and works through remotes in priority order.\n\nIf an operation should be performed against a local file or directory, remove the first part, including the colon.\n\nExamples:\n\nany:mnt/test/path.txt: A file in any of the available remotes.\n\n:mnt/test/path.txt: Shorthand for any ([]).\n\ns3test:some/test/path.txt: A file named s3test in a storage location.\n\nanother/test/path.txt: A local path.\n\nCopy files between storage locations:"},{"objectID":"Home","href":"user_guide/index.html#list-files","title":"User guide > List files","text":"List files\n\nList files in a specified directory:"},{"objectID":"Home","href":"user_guide/index.html#get-metadata","title":"User guide > Get metadata","text":"Get metadata\n\nGet the metadata of a file in a specified directory:"},{"objectID":"Home","href":"user_guide/index.html#remove-files","title":"User guide > Remove files","text":"Remove files\n\nRemove files in a specified directory:"},{"objectID":"Home","href":"user_guide/index.html#stop-client","title":"User guide > Stop client","text":"Stop client\n\nStop the client:"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/index.html#the-client-package","title":"The client package","text":"The client package\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/index.html#summary","title":"The client package > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\napi\n\nPyHPS data transfer API subpackage.\n\nmodels\n\n\n\nutils\n\nPyHPS data transfer utilities subpackage.\n\nSubmodules\n\n\n\n\n\nauthenticate\n\nProvides authentication for the user with a password or refresh token.\n\nbinary\n\nProvides utilities for managing binary files.\n\nclient\n\nProvides the Python client to the HPS data transfer APIs.\n\nexceptions\n\nProvides the base class for all client and server HPS-related errors.\n\ntoken\n\nProvides a utility function for handling authentication tokens.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/index.html#description","title":"The client package > Description","text":"Description\n\nPyHPS Data Transfer is a Python client for Ansys HPC Platform Services (HPS) data transfer."},{"objectID":"Home","href":"examples/startup/index.html#start-pyhps-data-transfer","title":"Start PyHPS Data Transfer","text":"Start PyHPS Data Transfer\n\nThis example shows how to create a data transfer API object using a client and then check for available storages.\n\nsphx_glr_examples_startup_data_transfer_runner.py\n\n"},{"objectID":"Home","href":"examples/startup/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 1 file from examples/startup:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_startup_data_transfer_runner.py (data_transfer_runner.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/index.html#the-utils-package","title":"The utils package","text":"The utils package\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/index.html#summary","title":"The utils package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\njitter\n\nProvides utilities for implementing exponential backoff with optional jitter.\n\notel_config\n\nProvides utilities for configuring OpenTelemetry (Otel) settings for the Ansys HPS data transfer client.\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/utils/index.html#description","title":"The utils package > Description","text":"Description\n\nPyHPS data transfer utilities subpackage."},{"objectID":"Home","href":"examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 0 files from examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nN/A\n\nN/A\n\nN/A"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/storage/index.html#the-storagepy-module","title":"The storage.py module","text":"The storage.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/storage/index.html#summary","title":"The storage.py module > Summary","text":"Summary\n\nEnums\n\n\n\n\n\nPathType\n\nCreate a collection of name/value pairs."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/storage/index.html#module-detail","title":"The storage.py module > Module detail","text":"Module detail\n\n\n\nclass storage.PathType(*args, **kwds)\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/storage/index.html#overview","title":"The storage.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nFilePath\n\n\n\nDirPath\n\n\n\nAnyPath\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/storage/index.html#import-detail","title":"The storage.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/storage/index.html#attribute-detail","title":"The storage.py module > Attribute detail","text":"Attribute detail\n\n\n\nPathType.FilePath = 'file'\n\n\n\n\n\nPathType.DirPath = 'dir'\n\n\n\n\n\nPathType.AnyPath = 'any'\n\n"},{"objectID":"Home","href":"index.html#pyhps-data-transfer-documentation-030","title":"PyHPS Data Transfer documentation 0.3.0","text":"PyHPS Data Transfer documentation 0.3.0\n\nAnsys HPC Platform Services (HPS) is a set of technology components designed to help you\nmanage the execution of simulations while making use of your full range of computing assets.\nPyHPS Data Transfer is a Python client library for the HPS data transfer service. This\nmodular, plugin-based solution wraps around data transfer client REST APIs to help solve\ncomplex data transfer problems for HPS.\n\nWith PyHPS Data Transfer, you can perform these operations:\n\nCreate and list files.\n\nCopy files.\n\nSet and view permissions.\n\nDelete files.\n\nGetting started \n\nLearn how to install PyHPS Data Transfer in user mode and\nquickly start using it.\n\ngetting_started/index\n\nUser guide \n\nUnderstand the basics of how to interact with PyHPS Data Transfer.\n\nuser_guide/index\n\nAPI reference \n\nUnderstand how to use Python to interact programmatically with\nPyHPS Data Transfer.\n\napi/index\n\nExamples \n\nExplore examples that show how to use PyHPS Data Transfer.\n\nexamples/index\n\nContribute \n\nLearn how to contribute to the PyHPS Data Transfer codebase\nor documentation.\n\ncontribute\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#the-binarypy-module","title":"The binary.py module","text":"The binary.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#summary","title":"The binary.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPrepareSubprocess\n\nProvides for letting the context manager disable vfork and posix_spawn in the subprocess.\n\nBinaryConfig\n\nProvides for configuring the worker binary connection to the HPS data transfer client.\n\nBinary\n\nProvides for starting, stopping, and monitoring the worker binary.\n\nAttributes\n\n\n\n\n\nlog\n\n\n\nlevel_map\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#description","title":"The binary.py module > Description","text":"Description\n\nProvides utilities for managing binary files.\n\nThis module also handles processes related to the Ansys HPS data transfer client."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#module-detail","title":"The binary.py module > Module detail","text":"Module detail\n\n\n\nclass binary.PrepareSubprocess\n\nProvides for letting the context manager disable vfork and posix_spawn in the subprocess."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#overview","title":"The binary.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\ndisable_vfork\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#import-detail","title":"The binary.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#attribute-detail","title":"The binary.py module > Attribute detail","text":"Attribute detail\n\n\n\nPrepareSubprocess.disable_vfork\n\n\n\n\n\nclass PrepareSubprocess.BinaryConfig(data_transfer_url: str = 'https://localhost:8443/hps/dt/api/v1', log: bool = True, log_to_file: bool = False, monitor_interval: float = 0.5, path=None, token: str = None, host: str = '127.0.0.1', port: int = None, verbosity: int = 1, insecure: bool = False, debug: bool = False, auth_type: str = None, env: dict | None = None)\n\nProvides for configuring the worker binary connection to the HPS data transfer client.\n\nParameters\n\ndata_transfer_url: str, default: `https://localhost:8443/hps/dt/api/v1`\n\nData transfer URL.\n\nlog: bool, default: True\n\nWhether to enable logging.\n\nlog_to_file: bool, default: False\n\nWhether to enable logging to a file.\n\nmonitor_interval: float, default: 0.5\n\nDuration for waiting before the next monitor check on the binary.\n\ntoken: str\n\nWorker configuration setting of the access token credential.\n\nhost: str, default: `127.0.0.1`\n\nHost IP to talk to the data transfer service.\n\nport: int\n\nHost port to talk to the data transfer service.\n\nverbosity: int, default: 1\n\nVerbosity level of the worker. The higher the number, the more verbose the logging.\n\ninsecure: bool, default: False\n\nWhether to ignore SSL certificate verification.\n\ndebug: bool, default: False\n\nWhether to enable debug logging."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#overview","title":"The binary.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nupdate\n\nUpdate worker configuration settings.\n\nProperties\n\n\n\n\n\nport\n\nPort.\n\ntoken\n\nToken.\n\nurl\n\nURL.\n\nenv\n\nGet additional environment variables that will be passed to the child process.\n\nAttributes\n\n\n\n\n\ndata_transfer_url\n\n\n\nlog\n\n\n\nlog_to_file\n\n\n\nmonitor_interval\n\n\n\npath\n\n\n\ndebug\n\n\n\nverbosity\n\n\n\nhost\n\n\n\ninsecure\n\n\n\nauth_type\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#import-detail","title":"The binary.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#property-detail","title":"The binary.py module > Property detail","text":"Property detail\n\n\n\nproperty BinaryConfig.port\n\nPort.\n\n\n\nproperty BinaryConfig.token\n\nToken.\n\n\n\nproperty BinaryConfig.url\n\nURL.\n\n\n\nproperty BinaryConfig.env\n\nGet additional environment variables that will be passed to the child process."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#attribute-detail","title":"The binary.py module > Attribute detail","text":"Attribute detail\n\n\n\nBinaryConfig.data_transfer_url = 'https://localhost:8443/hps/dt/api/v1'\n\n\n\n\n\nBinaryConfig.log = True\n\n\n\n\n\nBinaryConfig.log_to_file = False\n\n\n\n\n\nBinaryConfig.monitor_interval = 0.5\n\n\n\n\n\nBinaryConfig.path = None\n\n\n\n\n\nBinaryConfig.debug = False\n\n\n\n\n\nBinaryConfig.verbosity = 1\n\n\n\n\n\nBinaryConfig.host = '127.0.0.1'\n\n\n\n\n\nBinaryConfig.insecure = False\n\n\n\n\n\nBinaryConfig.auth_type = None\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#method-detail","title":"The binary.py module > Method detail","text":"Method detail\n\n\n\nBinaryConfig.update(**kwargs)\n\nUpdate worker configuration settings.\n\n\n\nclass BinaryConfig.Binary(config: BinaryConfig | None = None)\n\nProvides for starting, stopping, and monitoring the worker binary.\n\nParameters\n\nconfig: BinaryConfig\n\nBinary configuration."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#overview","title":"The binary.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart the worker binary.\n\nstop\n\nStop the worker binary.\n\nProperties\n\n\n\n\n\nconfig\n\nConfiguration.\n\nis_started\n\nFlag indicating if the binary is up and running."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#import-detail","title":"The binary.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#property-detail","title":"The binary.py module > Property detail","text":"Property detail\n\n\n\nproperty Binary.config\n\nConfiguration.\n\n\n\nproperty Binary.is_started\n\nFlag indicating if the binary is up and running."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/binary/index.html#method-detail","title":"The binary.py module > Method detail","text":"Method detail\n\n\n\nBinary.start()\n\nStart the worker binary.\n\nThis method checks for the binary in a set path, marks the binary as an executable,\nand then starts the executable.\n\n\n\nBinary.stop(wait=5.0)\n\nStop the worker binary.\n\n\n\nBinary.log\n\n\n\n\n\nBinary.level_map\n\n"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes PyHPS Data Transfer endpoints, their capabilities, and how\nto interact with them programmatically.\n\n"},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 5 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_basic_00_file_operations_client.py (../../examples/basic/00_file_operations_client.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_basic_01_async_data_transfer_client.py (../../examples/basic/01_async_data_transfer_client.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_permissions_set_permissions_example.py (../../examples/permissions/set_permissions_example.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_startup_data_transfer_runner.py (../../examples/startup/data_transfer_runner.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_transfer_files_transfer_files.py (../../examples/transfer_files/transfer_files.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"examples/basic/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 2 files from examples/basic:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_basic_00_file_operations_client.py (00_file_operations_client.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_basic_01_async_data_transfer_client.py (01_async_data_transfer_client.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/index.html#the-models-package","title":"The models package","text":"The models package\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/index.html#summary","title":"The models package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\ncommon\n\n\n\ncore\n\n\n\nmetadata\n\n\n\nmsg\n\n\n\nops\n\n\n\npermissions\n\n\n\nrest\n\n\n\nstorage\n\n\n\nClasses\n\n\n\n\n\nFieldCompatBucketNameFileNamePostRequest\n\n!!! abstract “Usage Documentation”\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/index.html#module-detail","title":"The models package > Module detail","text":"Module detail\n\n\n\nclass models.FieldCompatBucketNameFileNamePostRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/index.html#overview","title":"The models package > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nfile\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/index.html#import-detail","title":"The models package > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/index.html#attribute-detail","title":"The models package > Attribute detail","text":"Attribute detail\n\n\n\nFieldCompatBucketNameFileNamePostRequest.file: bytes = None\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#the-async_apipy-module","title":"The async_api.py module","text":"The async_api.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#summary","title":"The async_api.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nAsyncDataTransferApi\n\nProvides a wrapper for the Data Transfer Worker REST API, offering an async interface.\n\nAttributes\n\n\n\n\n\nlog\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#description","title":"The async_api.py module > Description","text":"Description\n\nProvides asynchronous API functionality for interacting with the Ansys HPS data transfer client.\n\nThis module includes methods and utilities for performing\ndata transfer operations asynchronously, managing resources, and handling client interactions."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#module-detail","title":"The async_api.py module > Module detail","text":"Module detail\n\n\n\nclass async_api.AsyncDataTransferApi(client: ansys.hps.data_transfer.client.client.AsyncClient)\n\nProvides a wrapper for the Data Transfer Worker REST API, offering an async interface."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#overview","title":"The async_api.py module > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstatus\n\nProvides an async interface to get the status of the worker.\n\noperations\n\nProvides an async interface to get a list of operations by their IDs.\n\nstorages\n\nProvides an async interface to get the list of storage configurations.\n\ncopy\n\nProvides an async interface to copy a list of SrcDst objects.\n\nexists\n\nProvides an async interface to check if a list of StoragePath objects exist.\n\nlist\n\nProvides an async interface to get a list of StoragePath objects.\n\nmkdir\n\nProvides an async interface to create a list of directories in the remote backend.\n\nmove\n\nProvides an async interface to move a list of SrcDst objects in the remote backend.\n\nremove\n\nProvides an async interface to remove files in the remote backend.\n\nrmdir\n\nProvides an async interface to remove directories in the remote backend.\n\ncheck_permissions\n\nProvides an async interface to check permissions of a list of RoleAssignment objects.\n\nget_permissions\n\nProvides an async interface to get permissions of a list of RoleQuery objects.\n\nremove_permissions\n\nProvides an async interface to remove permissions of a list of RoleAssignment objects.\n\nset_permissions\n\nProvides an async interface to set permissions of a list of RoleAssignment objects.\n\nget_metadata\n\nProvides an async interface to get metadata of a list of StoragePath objects.\n\nset_metadata\n\nProvides an async interface to set metadata of a list of DataAssignment objects.\n\nwait_for\n\nProvides an async interface to wait for a list of operations to complete.\n\nAttributes\n\n\n\n\n\ndump_mode\n\n\n\nclient\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#import-detail","title":"The async_api.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#attribute-detail","title":"The async_api.py module > Attribute detail","text":"Attribute detail\n\n\n\nAsyncDataTransferApi.dump_mode = 'json'\n\n\n\n\n\nAsyncDataTransferApi.client\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/async_api/index.html#method-detail","title":"The async_api.py module > Method detail","text":"Method detail\n\n\n\nasync AsyncDataTransferApi.status(wait=False, sleep=5, jitter=True, timeout: float | None = 20.0)\n\nProvides an async interface to get the status of the worker.\n\n\n\nasync AsyncDataTransferApi.operations(ids: list[str])\n\nProvides an async interface to get a list of operations by their IDs.\n\n\n\nasync AsyncDataTransferApi.storages()\n\nProvides an async interface to get the list of storage configurations.\n\n\n\nasync AsyncDataTransferApi.copy(operations: list[ansys.hps.data_transfer.client.models.msg.SrcDst])\n\nProvides an async interface to copy a list of SrcDst objects.\n\n\n\nasync AsyncDataTransferApi.exists(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nProvides an async interface to check if a list of StoragePath objects exist.\n\n\n\nasync AsyncDataTransferApi.list(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nProvides an async interface to get a list of StoragePath objects.\n\n\n\nasync AsyncDataTransferApi.mkdir(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nProvides an async interface to create a list of directories in the remote backend.\n\n\n\nasync AsyncDataTransferApi.move(operations: list[ansys.hps.data_transfer.client.models.msg.SrcDst])\n\nProvides an async interface to move a list of SrcDst objects in the remote backend.\n\n\n\nasync AsyncDataTransferApi.remove(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nProvides an async interface to remove files in the remote backend.\n\n\n\nasync AsyncDataTransferApi.rmdir(operations: list[ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nProvides an async interface to remove directories in the remote backend.\n\n\n\nasync AsyncDataTransferApi.check_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment])\n\nProvides an async interface to check permissions of a list of RoleAssignment objects.\n\n\n\nasync AsyncDataTransferApi.get_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleQuery])\n\nProvides an async interface to get permissions of a list of RoleQuery objects.\n\n\n\nasync AsyncDataTransferApi.remove_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment])\n\nProvides an async interface to remove permissions of a list of RoleAssignment objects.\n\n\n\nasync AsyncDataTransferApi.set_permissions(permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment])\n\nProvides an async interface to set permissions of a list of RoleAssignment objects.\n\n\n\nasync AsyncDataTransferApi.get_metadata(paths: list[str | ansys.hps.data_transfer.client.models.msg.StoragePath])\n\nProvides an async interface to get metadata of a list of StoragePath objects.\n\n\n\nasync AsyncDataTransferApi.set_metadata(asgs: dict[str | ansys.hps.data_transfer.client.models.msg.StoragePath, ansys.hps.data_transfer.client.models.metadata.DataAssignment])\n\nProvides an async interface to set metadata of a list of DataAssignment objects.\n\n\n\nasync AsyncDataTransferApi.wait_for(operation_ids: list[str | ansys.hps.data_transfer.client.models.ops.Operation], timeout: float | None = None, interval: float = 0.1, cap: float = 2.0, raise_on_error: bool = False, progress_handler: collections.abc.Callable[[str, float], collections.abc.Awaitable[None]] = None)\n\nProvides an async interface to wait for a list of operations to complete.\n\nParameters\n\noperation_ids: list[str | Operation]\n\nThe list of operation ids to wait for.\n\ntimeout: float | None\n\nThe maximum time to wait for the operations to complete.\n\ninterval: float\n\nThe interval between checks for the operations to complete.\n\ncap: float\n\nThe maximum backoff value used to calculate the next wait time. Default is 2.0.\n\nraise_on_error: bool\n\nRaise an exception if an error occurs. Default is False.\n\nprogress_handler: Callable[[str, float], None]\n\nA async function to handle progress updates. Default is None.\n\n\n\nAsyncDataTransferApi.log\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#the-opspy-module","title":"The ops.py module","text":"The ops.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#summary","title":"The ops.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nOperation\n\n!!! abstract “Usage Documentation”\n\nEnums\n\n\n\n\n\nOperationState\n\nCreate a collection of name/value pairs."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#module-detail","title":"The ops.py module > Module detail","text":"Module detail\n\n\n\nclass ops.Operation(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#overview","title":"The ops.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nchildren\n\n\n\ndescription\n\n\n\nended_at\n\n\n\nerror\n\n\n\nid\n\n\n\nmessages\n\n\n\nprogress\n\n\n\nprogress_current\n\n\n\nprogress_total\n\n\n\nqueued_at\n\n\n\nrate\n\n\n\nresult\n\n\n\nstarted_at\n\n\n\nstate\n\n\n\nsucceeded_on\n\n\n\nuser_id\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#import-detail","title":"The ops.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#attribute-detail","title":"The ops.py module > Attribute detail","text":"Attribute detail\n\n\n\nOperation.children: list[str] | None = None\n\n\n\n\n\nOperation.description: str | None = None\n\n\n\n\n\nOperation.ended_at: str | None = None\n\n\n\n\n\nOperation.error: str | None = None\n\n\n\n\n\nOperation.id: str | None = None\n\n\n\n\n\nOperation.messages: list[str] | None = None\n\n\n\n\n\nOperation.progress: float | None = None\n\n\n\n\n\nOperation.progress_current: int | None = None\n\n\n\n\n\nOperation.progress_total: int | None = None\n\n\n\n\n\nOperation.queued_at: str | None = None\n\n\n\n\n\nOperation.rate: str | None = None\n\n\n\n\n\nOperation.result: Any | None = None\n\n\n\n\n\nOperation.started_at: str | None = None\n\n\n\n\n\nOperation.state: OperationState | None = None\n\n\n\n\n\nOperation.succeeded_on: list[str] | None = None\n\n\n\n\n\nOperation.user_id: str | None = None\n\n\n\n\n\nclass Operation.OperationState(*args, **kwds)\n\nCreate a collection of name/value pairs.\n\nExample enumeration:\n\n>>> class Color(Enum):\n...     RED = 1\n...     BLUE = 2\n...     GREEN = 3\n\nAccess them by:\n\nattribute access:\n\n>>> Color.RED\n<Color.RED: 1>\n\nvalue lookup:\n\n>>> Color(1)\n<Color.RED: 1>\n\nname lookup:\n\n>>> Color['RED']\n<Color.RED: 1>\n\nEnumerations can be iterated over, and know how many members they have:\n\n>>> len(Color)\n3\n\n>>> list(Color)\n[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\nMethods can be added to enumerations, and members can have their own\nattributes – see the documentation for details."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#overview","title":"The ops.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nUnknown\n\n\n\nQueued\n\n\n\nRunning\n\n\n\nSucceeded\n\n\n\nFailed\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#import-detail","title":"The ops.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/ops/index.html#attribute-detail","title":"The ops.py module > Attribute detail","text":"Attribute detail\n\n\n\nOperationState.Unknown = 'unknown'\n\n\n\n\n\nOperationState.Queued = 'queued'\n\n\n\n\n\nOperationState.Running = 'running'\n\n\n\n\n\nOperationState.Succeeded = 'succeeded'\n\n\n\n\n\nOperationState.Failed = 'failed'\n\n"},{"objectID":"Home","href":"examples/permissions/index.html#set-and-query-permissions","title":"Set and query permissions","text":"Set and query permissions\n\nThis example shows how to set and query permissions on files stored in the remote backend.\n\nsphx_glr_examples_permissions_set_permissions_example.py\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#the-msgpy-module","title":"The msg.py module","text":"The msg.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#summary","title":"The msg.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBinaryInfo\n\n!!! abstract “Usage Documentation”\n\nBuildInfo\n\n!!! abstract “Usage Documentation”\n\nCheckPermissionsResponse\n\n!!! abstract “Usage Documentation”\n\nCopyMetadataRequest\n\n!!! abstract “Usage Documentation”\n\nFeatures\n\n!!! abstract “Usage Documentation”\n\nFileDownloadTokenResponse\n\n!!! abstract “Usage Documentation”\n\nGetMetadataRequest\n\n!!! abstract “Usage Documentation”\n\nMoveMetadataRequest\n\n!!! abstract “Usage Documentation”\n\nOpIdResponse\n\n!!! abstract “Usage Documentation”\n\nOpsRequest\n\n!!! abstract “Usage Documentation”\n\nRemoveMetadataRequest\n\n!!! abstract “Usage Documentation”\n\nSetMetadataRequest\n\n!!! abstract “Usage Documentation”\n\nStatus\n\n!!! abstract “Usage Documentation”\n\nStorageConfigResponse\n\n!!! abstract “Usage Documentation”\n\nStoragePath\n\n!!! abstract “Usage Documentation”\n\nWorkerConfigResponse\n\n!!! abstract “Usage Documentation”\n\nBinaries\n\n!!! abstract “Usage Documentation”\n\nPathOperations\n\n!!! abstract “Usage Documentation”\n\nSrcDst\n\n!!! abstract “Usage Documentation”\n\nSrcDstOperations\n\n!!! abstract “Usage Documentation”\n\nOpsResponse\n\n!!! abstract “Usage Documentation”\n\nCheckPermissionsRequest\n\n!!! abstract “Usage Documentation”\n\nGetPermissionsRequest\n\n!!! abstract “Usage Documentation”\n\nGetPermissionsResponse\n\n!!! abstract “Usage Documentation”\n\nRemovePermissionsRequest\n\n!!! abstract “Usage Documentation”\n\nSetPermissionsRequest\n\n!!! abstract “Usage Documentation”"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#module-detail","title":"The msg.py module > Module detail","text":"Module detail\n\n\n\nclass msg.BinaryInfo(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nname\n\n\n\nplatform\n\n\n\ntype\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nBinaryInfo.name: str | None = None\n\n\n\n\n\nBinaryInfo.platform: str | None = None\n\n\n\n\n\nBinaryInfo.type: str | None = None\n\n\n\n\n\nclass BinaryInfo.BuildInfo(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\narchitecture\n\n\n\nbranch\n\n\n\ngo_version\n\n\n\nmode\n\n\n\noperating_system\n\n\n\nrevision\n\n\n\nshort_revision\n\n\n\ntimestamp\n\n\n\nversion\n\n\n\nversion_hash\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nBuildInfo.architecture: str | None = None\n\n\n\n\n\nBuildInfo.branch: str | None = None\n\n\n\n\n\nBuildInfo.go_version: str | None = None\n\n\n\n\n\nBuildInfo.mode: str | None = None\n\n\n\n\n\nBuildInfo.operating_system: str | None = None\n\n\n\n\n\nBuildInfo.revision: str | None = None\n\n\n\n\n\nBuildInfo.short_revision: str | None = None\n\n\n\n\n\nBuildInfo.timestamp: str | None = None\n\n\n\n\n\nBuildInfo.version: str | None = None\n\n\n\n\n\nBuildInfo.version_hash: str | None = None\n\n\n\n\n\nclass BuildInfo.CheckPermissionsResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nallowed\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nCheckPermissionsResponse.allowed: bool | None = None\n\n\n\n\n\nclass CheckPermissionsResponse.CopyMetadataRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nrecursive\n\n\n\nsrc_dst\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nCopyMetadataRequest.recursive: bool | None = None\n\n\n\n\n\nCopyMetadataRequest.src_dst: list[ansys.hps.data_transfer.client.models.metadata.SrcDst]\n\n\n\n\n\nclass CopyMetadataRequest.Features(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nauth_types\n\n\n\ncompression_plugins\n\n\n\nmetadata_plugins\n\n\n\noperation_plugins\n\n\n\npermissions_plugins\n\n\n\nstorage_plugins\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nFeatures.auth_types: list[str] | None = None\n\n\n\n\n\nFeatures.compression_plugins: list[str] | None = None\n\n\n\n\n\nFeatures.metadata_plugins: list[str] | None = None\n\n\n\n\n\nFeatures.operation_plugins: list[str] | None = None\n\n\n\n\n\nFeatures.permissions_plugins: list[str] | None = None\n\n\n\n\n\nFeatures.storage_plugins: list[str] | None = None\n\n\n\n\n\nclass Features.FileDownloadTokenResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\ntoken\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nFileDownloadTokenResponse.token: str | None = None\n\n\n\n\n\nclass FileDownloadTokenResponse.GetMetadataRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npaths\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nGetMetadataRequest.paths: list[str] | None = None\n\n\n\n\n\nclass GetMetadataRequest.MoveMetadataRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nrecursive\n\n\n\nsrc_dst\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nMoveMetadataRequest.recursive: bool | None = None\n\n\n\n\n\nMoveMetadataRequest.src_dst: list[ansys.hps.data_transfer.client.models.metadata.SrcDst]\n\n\n\n\n\nclass MoveMetadataRequest.OpIdResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nid\n\n\n\nlocation\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nOpIdResponse.id: str | None = '2diK2kCkpgeHAQSNthIZ1JYyPte'\n\n\n\n\n\nOpIdResponse.location: str | None = '/api/v1/operations/2diK2kCkpgeHAQSNthIZ1JYyPte'\n\n\n\n\n\nclass OpIdResponse.OpsRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nids\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nOpsRequest.ids: list[str]\n\n\n\n\n\nclass OpsRequest.RemoveMetadataRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npaths\n\n\n\nrecursive\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nRemoveMetadataRequest.paths: list[str]\n\n\n\n\n\nRemoveMetadataRequest.recursive: bool | None = None\n\n\n\n\n\nclass RemoveMetadataRequest.SetMetadataRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nmetadata\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nSetMetadataRequest.metadata: ansys.hps.data_transfer.client.models.metadata.DataAssignments\n\n\n\n\n\nclass SetMetadataRequest.Status(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nbuild_info\n\n\n\nfeatures\n\n\n\nready\n\n\n\ntime\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nStatus.build_info: BuildInfo | None = None\n\n\n\n\n\nStatus.features: Features | None = None\n\n\n\n\n\nStatus.ready: bool | None = None\n\n\n\n\n\nStatus.time: str | None = None\n\n\n\n\n\nclass Status.StorageConfigResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nstorage\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nStorageConfigResponse.storage: list[dict[str, Any]] | None = None\n\n\n\n\n\nclass StorageConfigResponse.StoragePath(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npath\n\n\n\nremote\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nStoragePath.path: str\n\n\n\n\n\nStoragePath.remote: str | None = 'any'\n\n\n\n\n\nclass StoragePath.WorkerConfigResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nauth\n\n\n\ncompression\n\n\n\nmetadata\n\n\n\npermissions\n\n\n\nstorage\n\n\n\nuser_id\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nWorkerConfigResponse.auth: dict[str, Any] | None = None\n\n\n\n\n\nWorkerConfigResponse.compression: dict[str, Any] | None = None\n\n\n\n\n\nWorkerConfigResponse.metadata: dict[str, Any] | None = None\n\n\n\n\n\nWorkerConfigResponse.permissions: dict[str, Any] | None = None\n\n\n\n\n\nWorkerConfigResponse.storage: list[dict[str, Any]] | None = None\n\n\n\n\n\nWorkerConfigResponse.user_id: str | None = None\n\n\n\n\n\nclass WorkerConfigResponse.Binaries(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\navailable\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nBinaries.available: list[BinaryInfo] | None = None\n\n\n\n\n\nclass Binaries.PathOperations(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\noperations\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nPathOperations.operations: list[StoragePath]\n\n\n\n\n\nclass PathOperations.SrcDst(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\ndst\n\n\n\nsrc\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nSrcDst.dst: StoragePath\n\n\n\n\n\nSrcDst.src: StoragePath\n\n\n\n\n\nclass SrcDst.SrcDstOperations(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\noperations\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nSrcDstOperations.operations: list[SrcDst]\n\n\n\n\n\nclass SrcDstOperations.OpsResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\noperations\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nOpsResponse.operations: list[ansys.hps.data_transfer.client.models.ops.Operation] | None = None\n\n\n\n\n\nclass OpsResponse.CheckPermissionsRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npermissions\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nCheckPermissionsRequest.permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment] | None = None\n\n\n\n\n\nclass CheckPermissionsRequest.GetPermissionsRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npermissions\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nGetPermissionsRequest.permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleQuery] | None = None\n\n\n\n\n\nclass GetPermissionsRequest.GetPermissionsResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npermissions\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nGetPermissionsResponse.permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment] | None = None\n\n\n\n\n\nclass GetPermissionsResponse.RemovePermissionsRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npermissions\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nRemovePermissionsRequest.permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment] | None = None\n\n\n\n\n\nclass RemovePermissionsRequest.SetPermissionsRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#overview","title":"The msg.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\npermissions\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#import-detail","title":"The msg.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/msg/index.html#attribute-detail","title":"The msg.py module > Attribute detail","text":"Attribute detail\n\n\n\nSetPermissionsRequest.permissions: list[ansys.hps.data_transfer.client.models.permissions.RoleAssignment] | None = None\n\n"},{"objectID":"Home","href":"examples/transfer_files/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 1 file from examples/transfer_files:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_transfer_files_transfer_files.py (transfer_files.py)\n\n00:00.000\n\n0.0"},{"objectID":"Contribute","href":"contribute.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyHPS Data Transfer.\n\nThe following contribution information is specific to PyHPS Data Transfer."},{"objectID":"Contribute","href":"contribute.html#install-in-developer-mode","title":"Contribute > Install in developer mode","text":"Install in developer mode\n\nInstalling PyHPS Data Transfer in developer mode allows you to modify and enhance the source:\n\nClone the repository:\n\nAccess the directory where you have cloned the repository:\n\nCreate a clean Python virtual environment and activate it:\n\nInstall the package in editable mode with the required build system, documentation,\nand testing tools:\n\nVerify your development installation:"},{"objectID":"Contribute","href":"contribute.html#test-pypyhps-data-transfer","title":"Contribute > Test PyPyHPS Data Transfer","text":"Test PyPyHPS Data Transfer\n\nPyHPS Data Transfer takes advantage of tox. This tool allows you to automate common development\ntasks (similar to Makefile), but it is oriented towards Python development."},{"objectID":"Contribute","href":"contribute.html#use-tox","title":"Contribute > Use tox","text":"Use tox\n\nWhile Makefile has rules, tox has environments. In fact, tox\ncreates its own virtual environment so that anything being tested is isolated\nfrom the project to guarantee the project’s integrity.\n\nThe following environment commands are provided:\n\ntox -e style: Checks for coding style quality.\n\ntox -e py: Checks for unit tests.\n\ntox -e py-coverage: Checks for unit testing and code coverage.\n\ntox -e doc: Checks for documentation building."},{"objectID":"Contribute","href":"contribute.html#perform-raw-testing","title":"Contribute > Perform raw testing","text":"Perform raw testing\n\nIf required, from the command line, you can call style commands like\nRuff. You can also call unit testing commands like pytest.\nHowever, running these commands do not guarantee that your project is being tested\nin an isolated environment, which is the reason why tools like tox exist."},{"objectID":"Contribute","href":"contribute.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nAs indicated in Coding style\nin the PyAnsys developer’s guide, PyHPS Data Transfer follows PEP8 guidelines. PyHPS Data Transfer\nimplements pre-commit for style checking.\n\nTo ensure your code meets minimum code styling standards, run these commands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:"},{"objectID":"Contribute","href":"contribute.html#build-documentation","title":"Contribute > Build documentation","text":"Build documentation\n\nTo build documentation manually, run these commands:\n\nHowever, the recommended way of checking documentation integrity is to use\ntox:"},{"objectID":"Contribute","href":"contribute.html#distribute","title":"Contribute > Distribute","text":"Distribute\n\nIf you would like to create either source or wheel files, start by installing\nthe building requirements and then executing the build module:\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#the-restpy-module","title":"The rest.py module","text":"The rest.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#summary","title":"The rest.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nCompatCopyRequest\n\n!!! abstract “Usage Documentation”\n\nTokenResponse\n\n!!! abstract “Usage Documentation”\n\nWorkerTokenResponse\n\n!!! abstract “Usage Documentation”\n\nTokenRequest\n\n!!! abstract “Usage Documentation”"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#module-detail","title":"The rest.py module > Module detail","text":"Module detail\n\n\n\nclass rest.CompatCopyRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#overview","title":"The rest.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\ndestination\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#import-detail","title":"The rest.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#attribute-detail","title":"The rest.py module > Attribute detail","text":"Attribute detail\n\n\n\nCompatCopyRequest.destination: str | None = None\n\n\n\n\n\nclass CompatCopyRequest.TokenResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#import-detail","title":"The rest.py module > Import detail","text":"Import detail\n\n\n\nclass CompatCopyRequest.WorkerTokenResponse(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#overview","title":"The rest.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nexpires_at\n\n\n\ntoken\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#import-detail","title":"The rest.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#attribute-detail","title":"The rest.py module > Attribute detail","text":"Attribute detail\n\n\n\nWorkerTokenResponse.expires_at: str | None = None\n\n\n\n\n\nWorkerTokenResponse.token: str | None = None\n\n\n\n\n\nclass WorkerTokenResponse.TokenRequest(/, **data: Any)\n\n!!! abstract “Usage Documentation”\n\n[Models](../concepts/models.md)\n\nA base class for creating Pydantic models.\n\nAttributes:\n\n__class_vars__: The names of the class variables defined on the model.\n__private_attributes__: Metadata about the private attributes of the model.\n__signature__: The synthesized __init__ [Signature][inspect.Signature] of the model.\n\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom __init__ function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n\nThis replaces Model.__validators__ and Model.__root_validators__ from Pydantic V1.\n\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n\n__args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [RootModel][pydantic.root_model.RootModel].\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [FieldInfo][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [ComputedFieldInfo][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [extra][pydantic.config.ConfigDict.extra]\n\nis set to ‘allow’.\n\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#overview","title":"The rest.py module > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nother\n\n\n\nread\n\n\n\nrecursive\n\n\n\ntype\n\n\n\nwrite\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#import-detail","title":"The rest.py module > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/models/rest/index.html#attribute-detail","title":"The rest.py module > Attribute detail","text":"Attribute detail\n\n\n\nTokenRequest.other: dict[str, Any] | None = None\n\n\n\n\n\nTokenRequest.read: list[str] | None = None\n\n\n\n\n\nTokenRequest.recursive: bool | None = None\n\n\n\n\n\nTokenRequest.type: ansys.hps.data_transfer.client.models.storage.PathType | None = None\n\n\n\n\n\nTokenRequest.write: list[str] | None = None\n\n"},{"objectID":"Home","href":"examples/startup/data_transfer_runner.html#start-pyhps-data-transfer","title":"Start PyHPS Data Transfer","text":"Start PyHPS Data Transfer\n\nThis example script starts a data transfer service client and queries available storage.\n\nExample usage:\npython examples/data_transfer_runner.py --debug\n\n\n\nDownload Jupyter notebook: data_transfer_runner.ipynb\n\nDownload Python source code: data_transfer_runner.py\n\nDownload zipped: data_transfer_runner.zip"},{"objectID":"Home","href":"user_guide/permissions.html#manage-permissions","title":"Manage permissions","text":"Manage permissions\n\nSystem administrators use the permissions plugin to manage permissions on the root directory so that not every user can read or write to it.\n\nSpecify system usernames either in Keycloak or by using the user_mapping property.\n\nTo get system usernames from Keycloak:\n\nConfigure credentials within the Keycloak block for a user who can list other users and their attributes.\n\nAdd a custom attribute in Keycloak for every user with a corresponding system username.\n\nEnsure that the key matches the keycloak.attribute_name property.\n\nSet the value to the system username or its numerical representation.\n\nTo use the user_mapping property:\n\nInclude the users’ Keycloak UUIDs as keys.\n\nSet the values to the system usernames. Use a numerical value if the username comes from Active Directory.\n\nHere is a simple example:"},{"objectID":"Home","href":"user_guide/permissions.html#connect-to-the-keycloakadmin-api","title":"Manage permissions > Connect to the KeycloakAdmin API","text":"Connect to the KeycloakAdmin API\n\nConnect as a Keycloak administrator using the default credentials to get the user_id field:"},{"objectID":"Home","href":"user_guide/permissions.html#set-and-check-permissions","title":"Manage permissions > Set and check permissions","text":"Set and check permissions\n\nUse the set_permissions() and check_permissions() methods to set and check permissions.\n\nThe set_permissions() method takes a list of RoleAssignment objects with resource, role, and subject fields:\n\nresource: Specifies the resource type with the directory path and resource type.\n\nrole: Assigns a role to the resource. Options are reader, writer, and administrator.\n\nsubject: Passes the Subject and SubjectType with the user ID and user/group/any respectively.\n\nHere is an example of how to use the set_permissions() method:\n\nSimilar to the set_permissions() method, the check_permissions method takes a list of RoleQuery objects with resource, role, and subject fields.\n\nThis code shows how to use the check_permissions() method:"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/retry/index.html#the-retrypy-module","title":"The retry.py module","text":"The retry.py module\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/retry/index.html#summary","title":"The retry.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nretry\n\nProvides a decorator for retrying a function call with exponential backoff.\n\nAttributes\n\n\n\n\n\nlog\n\n\n\nmax_tries_env_name\n\n\n\nmax_time_env_name\n\n"},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/retry/index.html#description","title":"The retry.py module > Description","text":"Description\n\nProvides utilities for implementing retry mechanisms in the Ansys HPS data transfer client.\n\nThis module includes functionality for handling transient errors and ensuring\nrobust and reliable operations during data transfer."},{"objectID":"Home","href":"api/ansys/hps/data_transfer/client/api/retry/index.html#module-detail","title":"The retry.py module > Module detail","text":"Module detail\n\n\n\nretry.retry(max_tries=_lookup_max_tries, max_time=_lookup_max_time, raise_on_giveup=True, jitter=backoff.full_jitter)\n\nProvides a decorator for retrying a function call with exponential backoff.\n\n\n\nretry.log\n\n\n\n\n\nretry.max_tries_env_name = 'ANSYS_DT_CLIENT_RETRY_MAX_TIME'\n\n\n\n\n\nretry.max_time_env_name = 'ANSYS_DT_CLIENT_RETRY_MAX_TRIES'\n\n"}]