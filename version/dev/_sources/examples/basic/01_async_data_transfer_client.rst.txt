
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/basic/01_async_data_transfer_client.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_basic_01_async_data_transfer_client.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_basic_01_async_data_transfer_client.py:


.. _ref_async:

==================================
Run file operations asynchronously
==================================

This exammple script is intended to be run from the command line. It
authenticates with the specified HPS service and sets up an asynchronous
client for data transfer operations. It then transfers files to and from remote backends
using the data transfer service.

Example usage:
``python examples/async_data_transfer_client.py --url "https://example.com/hps" --username "user" --password "pass"``

.. GENERATED FROM PYTHON SOURCE LINES 38-70

.. code-block:: Python


    import asyncio
    import glob
    import logging
    import os

    import typer
    from typing_extensions import Annotated

    from ansys.hps.data_transfer.client import AsyncClient, AsyncDataTransferApi, get_log_level
    from ansys.hps.data_transfer.client.authenticate import authenticate
    from ansys.hps.data_transfer.client.models import SrcDst, StoragePath

    async def main(
        debug: Annotated[bool, typer.Option(help="Enable debug logging")] = False,
        verbosity: Annotated[int, typer.Option(help="Increase verbosity")] = 1,
        url: Annotated[str, typer.Option(help="HPS URL to connect to")] = "https://localhost:8443/hps",
        username: Annotated[str, typer.Option(help="Username to authenticate with")] = "repadmin",
        password: Annotated[
            str, typer.Option(prompt=True, hide_input=True, help="Password to authenticate with")
        ] = "repadmin",
    ):

        log = logging.getLogger()
        logging.basicConfig(format="%(levelname)8s > %(message)s", level=get_log_level(verbosity, debug))

        dt_url = f"{url}/dt/api/v1"
        auth_url = f"{url}/auth/realms/rep"
        token = authenticate(username=username, password=password, verify=False, url=auth_url)
        token = token.get("access_token", None)
        assert token is not None


.. GENERATED FROM PYTHON SOURCE LINES 71-73

Create an ``AsyncClient`` instance
==================================

.. GENERATED FROM PYTHON SOURCE LINES 73-85

.. code-block:: Python
   :dedent: 1


        client = AsyncClient(clean=True)

        client.binary_config.update(
            verbosity=verbosity,
            debug=debug,
            insecure=True,
            token=token,
            data_transfer_url=dt_url,
        )
        await client.start()


.. GENERATED FROM PYTHON SOURCE LINES 86-88

Create an ``AsyncDataTransferApi`` instance
===========================================

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python
   :dedent: 1


        api = AsyncDataTransferApi(client)
        await api.status(wait=True)


.. GENERATED FROM PYTHON SOURCE LINES 93-95

Get available storages
======================

.. GENERATED FROM PYTHON SOURCE LINES 95-100

.. code-block:: Python
   :dedent: 1


        storages = await api.storages()
        storage_names = [f"{storage['name']}({storage['type']})" for storage in storages]
        log.info(f"Available storages: {storage_names}")


.. GENERATED FROM PYTHON SOURCE LINES 101-103

Run file operations
===================

.. GENERATED FROM PYTHON SOURCE LINES 103-143

.. code-block:: Python


        base_dir = "basic-example"
        mkdir_op = await api.mkdir([StoragePath(path=f"{base_dir}")])
        await api.wait_for([mkdir_op.id])

        log.info("Copying files ...")
        files = glob.glob(os.path.join(os.path.dirname(__file__), "files", "*.txt"))
        srcs = [StoragePath(path=file, remote="local") for file in files]
        dsts = [StoragePath(path=f"{base_dir}/{os.path.basename(file)}") for file in files]

        op = await api.copy([SrcDst(src=src, dst=dst) for src, dst in zip(srcs, dsts)])
        op = await api.wait_for([op.id])

        files = glob.glob(os.path.join(os.path.dirname(__file__), "*.txt"))
        srcs = [StoragePath(path=file, remote="local") for file in files]
        dsts = [StoragePath(path=f"{os.path.basename(file)}") for file in files]

        op = await api.copy([SrcDst(src=src, dst=dst) for src, dst in zip(srcs, dsts)])
        op = await api.wait_for([op.id])

        log.info("Listing files ...")
        op = await api.list([StoragePath(path=base_dir)])
        op = await api.wait_for([op.id])
        log.info(f"Files in {base_dir}: {op[0].result}")

        log.info("Getting metadata ...")
        op = await api.get_metadata([StoragePath(path=f"{base_dir}/2.txt")])
        op = await api.wait_for(op.id)
        md = op[0].result[f"{base_dir}/2.txt"]
        log.info(f"Metadata for {base_dir}/2.txt: {md}")

        log.info("Removing files ...")
        op = await api.rmdir([StoragePath(path=base_dir)])
        op = await api.wait_for([op.id])

        await client.stop()


    if __name__ == "__main__":
        asyncio.run(main())


.. _sphx_glr_download_examples_basic_01_async_data_transfer_client.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_async_data_transfer_client.ipynb <01_async_data_transfer_client.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_async_data_transfer_client.py <01_async_data_transfer_client.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 01_async_data_transfer_client.zip <01_async_data_transfer_client.zip>`
