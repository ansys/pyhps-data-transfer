





The ``models`` package
==========================

.. py:module:: ansys.hps.data_transfer.client.models


Summary
-------










.. py:currentmodule:: models
.. tab-set::


    .. tab-item:: Submodules

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~ansys.hps.data_transfer.client.models.common`
            - 


          * - :py:obj:`~ansys.hps.data_transfer.client.models.core`
            - 


          * - :py:obj:`~ansys.hps.data_transfer.client.models.metadata`
            - 


          * - :py:obj:`~ansys.hps.data_transfer.client.models.msg`
            - 


          * - :py:obj:`~ansys.hps.data_transfer.client.models.ops`
            - 


          * - :py:obj:`~ansys.hps.data_transfer.client.models.permissions`
            - 


          * - :py:obj:`~ansys.hps.data_transfer.client.models.rest`
            - 


          * - :py:obj:`~ansys.hps.data_transfer.client.models.storage`
            - 




    .. tab-item:: Classes

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~FieldCompatBucketNameFileNamePostRequest`
            - !!! abstract "Usage Documentation"










.. toctree::
   :titlesonly:
   :maxdepth: 1
   :hidden:

    <span class="nf nf-fa-file"></span> common</api/ansys/hps/data_transfer/client/models/common/index>
    <span class="nf nf-fa-file"></span> core</api/ansys/hps/data_transfer/client/models/core/index>
    <span class="nf nf-fa-file"></span> metadata</api/ansys/hps/data_transfer/client/models/metadata/index>
    <span class="nf nf-fa-file"></span> msg</api/ansys/hps/data_transfer/client/models/msg/index>
    <span class="nf nf-fa-file"></span> ops</api/ansys/hps/data_transfer/client/models/ops/index>
    <span class="nf nf-fa-file"></span> permissions</api/ansys/hps/data_transfer/client/models/permissions/index>
    <span class="nf nf-fa-file"></span> rest</api/ansys/hps/data_transfer/client/models/rest/index>
    <span class="nf nf-fa-file"></span> storage</api/ansys/hps/data_transfer/client/models/storage/index>














Module detail
-------------








.. py:class:: FieldCompatBucketNameFileNamePostRequest(/, **data: Any)



   
   !!! abstract "Usage Documentation"
       [Models](../concepts/models.md)

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of the class variables defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The core schema of the model.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
       __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
       __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

       __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
       __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

       __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
           is set to `'allow'`.
       __pydantic_fields_set__: The names of fields explicitly set during instantiation.
       __pydantic_private__: Values of private attributes set on the model instance.















   ..
       !! processed by numpydoc !!


.. py:currentmodule:: FieldCompatBucketNameFileNamePostRequest

Overview
--------

.. tab-set::





   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~file`
            - 






Import detail
-------------

.. code-block:: python

    from ansys.hps.data_transfer.client.models import FieldCompatBucketNameFileNamePostRequest


Attribute detail
----------------

.. py:attribute:: file
   :type:  bytes
   :value: None









